// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: App_Server_Protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "App_Server_Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace APP_SERVER_NET_Protocol {
class App2S_LoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<App2S_Login> {
} _App2S_Login_default_instance_;
class APP2S_Request_Slope_ListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Request_Slope_List> {
} _APP2S_Request_Slope_List_default_instance_;
class APP2S_Request_Sensor_ListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Request_Sensor_List> {
} _APP2S_Request_Sensor_List_default_instance_;
class APP2S_Request_Sensor_HistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Request_Sensor_History> {
} _APP2S_Request_Sensor_History_default_instance_;
class APP2S_Add_SlopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Add_Slope> {
} _APP2S_Add_Slope_default_instance_;
class APP2S_Del_SlopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Del_Slope> {
} _APP2S_Del_Slope_default_instance_;
class APP2S_Update_Slope_DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Update_Slope_Data> {
} _APP2S_Update_Slope_Data_default_instance_;
class APP2S_Add_SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Add_Sensor> {
} _APP2S_Add_Sensor_default_instance_;
class APP2S_Del_SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Del_Sensor> {
} _APP2S_Del_Sensor_default_instance_;
class APP2S_Update_Sensor_DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Update_Sensor_Data> {
} _APP2S_Update_Sensor_Data_default_instance_;
class APP2S_Modify_PasswordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Modify_Password> {
} _APP2S_Modify_Password_default_instance_;
class APP2S_Find_SlopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Find_Slope> {
} _APP2S_Find_Slope_default_instance_;
class APP2S_Find_SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<APP2S_Find_Sensor> {
} _APP2S_Find_Sensor_default_instance_;
class S2App_Login_Result_ServerDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Login_Result_ServerData> {
} _S2App_Login_Result_ServerData_default_instance_;
class S2App_Login_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Login_Result> {
} _S2App_Login_Result_default_instance_;
class S2App_Slope_List_SlopeDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Slope_List_SlopeData> {
} _S2App_Slope_List_SlopeData_default_instance_;
class S2App_Slope_ListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Slope_List> {
} _S2App_Slope_List_default_instance_;
class S2App_Sensor_List_SensorDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Sensor_List_SensorData> {
} _S2App_Sensor_List_SensorData_default_instance_;
class S2App_Sensor_ListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Sensor_List> {
} _S2App_Sensor_List_default_instance_;
class S2App_Sensor_History_SensorDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Sensor_History_SensorData> {
} _S2App_Sensor_History_SensorData_default_instance_;
class S2App_Sensor_HistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2App_Sensor_History> {
} _S2App_Sensor_History_default_instance_;
class S2APP_ERRORDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_ERROR> {
} _S2APP_ERROR_default_instance_;
class S2APP_New_SlopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_New_Slope> {
} _S2APP_New_Slope_default_instance_;
class S2APP_Del_SlopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_Del_Slope> {
} _S2APP_Del_Slope_default_instance_;
class S2APP_Update_SlopeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_Update_Slope> {
} _S2APP_Update_Slope_default_instance_;
class S2APP_Add_SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_Add_Sensor> {
} _S2APP_Add_Sensor_default_instance_;
class S2APP_Del_SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_Del_Sensor> {
} _S2APP_Del_Sensor_default_instance_;
class S2APP_Update_SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_Update_Sensor> {
} _S2APP_Update_Sensor_default_instance_;
class S2APP_Modify_Password_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2APP_Modify_Password_Result> {
} _S2APP_Modify_Password_Result_default_instance_;

namespace protobuf_App_5fServer_5fProtocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App2S_Login, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App2S_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App2S_Login, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App2S_Login, password_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Slope_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Slope_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Slope_List, server_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_List, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_List, sensor_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_History, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_History, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_History, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_History, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Request_Sensor_History, end_time_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Slope, scene_id_),
  3,
  0,
  2,
  5,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Del_Slope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Del_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Del_Slope, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Slope_Data, scene_id_),
  2,
  3,
  0,
  4,
  5,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Add_Sensor, scene_id_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Del_Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Del_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Del_Sensor, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Update_Sensor_Data, scene_id_),
  2,
  3,
  6,
  4,
  5,
  0,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Modify_Password, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Modify_Password, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Modify_Password, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Modify_Password, new_password_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Slope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Slope, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Slope, slope_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Sensor, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Sensor, slope_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Sensor, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APP2S_Find_Sensor, sensor_type_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result_ServerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result_ServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result_ServerData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result_ServerData, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result_ServerData, port_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Login_Result, server_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List_SlopeData, scene_id_),
  2,
  3,
  0,
  6,
  4,
  5,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Slope_List, slope_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, cur_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, cur_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, cur_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, avg_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, avg_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, avg_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, offset_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, offset_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, offset_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List_SensorData, scene_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  0,
  1,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_List, sensor_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, min_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, min_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, min_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, max_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, max_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, max_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, min_offset_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, min_offset_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, min_offset_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, max_offset_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, max_offset_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History_SensorData, max_offset_value3_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, invterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, avg_value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, avg_value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, avg_value3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, history_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2App_Sensor_History, scene_id_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_ERROR, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_ERROR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_ERROR, error_code_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_New_Slope, scene_id_),
  2,
  3,
  0,
  6,
  4,
  5,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Del_Slope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Del_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Del_Slope, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Slope, scene_id_),
  2,
  3,
  0,
  6,
  4,
  5,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Add_Sensor, scene_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Del_Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Del_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Del_Sensor, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, slope_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Update_Sensor, scene_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Modify_Password_Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Modify_Password_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2APP_Modify_Password_Result, result_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(App2S_Login)},
  { 9, 15, sizeof(APP2S_Request_Slope_List)},
  { 16, 23, sizeof(APP2S_Request_Sensor_List)},
  { 25, 33, sizeof(APP2S_Request_Sensor_History)},
  { 36, 47, sizeof(APP2S_Add_Slope)},
  { 53, 59, sizeof(APP2S_Del_Slope)},
  { 60, 72, sizeof(APP2S_Update_Slope_Data)},
  { 79, 91, sizeof(APP2S_Add_Sensor)},
  { 98, 104, sizeof(APP2S_Del_Sensor)},
  { 105, 118, sizeof(APP2S_Update_Sensor_Data)},
  { 126, 133, sizeof(APP2S_Modify_Password)},
  { 135, 142, sizeof(APP2S_Find_Slope)},
  { 144, 153, sizeof(APP2S_Find_Sensor)},
  { 157, 165, sizeof(S2App_Login_Result_ServerData)},
  { 168, 175, sizeof(S2App_Login_Result)},
  { 177, 190, sizeof(S2App_Slope_List_SlopeData)},
  { 198, 204, sizeof(S2App_Slope_List)},
  { 205, 228, sizeof(S2App_Sensor_List_SensorData)},
  { 246, 252, sizeof(S2App_Sensor_List)},
  { 253, 270, sizeof(S2App_Sensor_History_SensorData)},
  { 282, 298, sizeof(S2App_Sensor_History)},
  { 309, 315, sizeof(S2APP_ERROR)},
  { 316, 329, sizeof(S2APP_New_Slope)},
  { 337, 343, sizeof(S2APP_Del_Slope)},
  { 344, 357, sizeof(S2APP_Update_Slope)},
  { 365, 379, sizeof(S2APP_Add_Sensor)},
  { 388, 394, sizeof(S2APP_Del_Sensor)},
  { 395, 409, sizeof(S2APP_Update_Sensor)},
  { 418, 424, sizeof(S2APP_Modify_Password_Result)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_App2S_Login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Request_Slope_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Request_Sensor_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Request_Sensor_History_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Add_Slope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Del_Slope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Update_Slope_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Add_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Del_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Update_Sensor_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Modify_Password_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Find_Slope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_APP2S_Find_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Login_Result_ServerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Login_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Slope_List_SlopeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Slope_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Sensor_List_SensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Sensor_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Sensor_History_SensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2App_Sensor_History_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_ERROR_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_New_Slope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_Del_Slope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_Update_Slope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_Add_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_Del_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_Update_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2APP_Modify_Password_Result_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "App_Server_Protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

}  // namespace

void TableStruct::Shutdown() {
  _App2S_Login_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _APP2S_Request_Slope_List_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _APP2S_Request_Sensor_List_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _APP2S_Request_Sensor_History_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _APP2S_Add_Slope_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _APP2S_Del_Slope_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _APP2S_Update_Slope_Data_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _APP2S_Add_Sensor_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _APP2S_Del_Sensor_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _APP2S_Update_Sensor_Data_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _APP2S_Modify_Password_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _APP2S_Find_Slope_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _APP2S_Find_Sensor_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _S2App_Login_Result_ServerData_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _S2App_Login_Result_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _S2App_Slope_List_SlopeData_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _S2App_Slope_List_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _S2App_Sensor_List_SensorData_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _S2App_Sensor_List_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _S2App_Sensor_History_SensorData_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _S2App_Sensor_History_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _S2APP_ERROR_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _S2APP_New_Slope_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _S2APP_Del_Slope_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _S2APP_Update_Slope_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _S2APP_Add_Sensor_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _S2APP_Del_Sensor_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _S2APP_Update_Sensor_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _S2APP_Modify_Password_Result_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _App2S_Login_default_instance_.DefaultConstruct();
  _APP2S_Request_Slope_List_default_instance_.DefaultConstruct();
  _APP2S_Request_Sensor_List_default_instance_.DefaultConstruct();
  _APP2S_Request_Sensor_History_default_instance_.DefaultConstruct();
  _APP2S_Add_Slope_default_instance_.DefaultConstruct();
  _APP2S_Del_Slope_default_instance_.DefaultConstruct();
  _APP2S_Update_Slope_Data_default_instance_.DefaultConstruct();
  _APP2S_Add_Sensor_default_instance_.DefaultConstruct();
  _APP2S_Del_Sensor_default_instance_.DefaultConstruct();
  _APP2S_Update_Sensor_Data_default_instance_.DefaultConstruct();
  _APP2S_Modify_Password_default_instance_.DefaultConstruct();
  _APP2S_Find_Slope_default_instance_.DefaultConstruct();
  _APP2S_Find_Sensor_default_instance_.DefaultConstruct();
  _S2App_Login_Result_ServerData_default_instance_.DefaultConstruct();
  _S2App_Login_Result_default_instance_.DefaultConstruct();
  _S2App_Slope_List_SlopeData_default_instance_.DefaultConstruct();
  _S2App_Slope_List_default_instance_.DefaultConstruct();
  _S2App_Sensor_List_SensorData_default_instance_.DefaultConstruct();
  _S2App_Sensor_List_default_instance_.DefaultConstruct();
  _S2App_Sensor_History_SensorData_default_instance_.DefaultConstruct();
  _S2App_Sensor_History_default_instance_.DefaultConstruct();
  _S2APP_ERROR_default_instance_.DefaultConstruct();
  _S2APP_New_Slope_default_instance_.DefaultConstruct();
  _S2APP_Del_Slope_default_instance_.DefaultConstruct();
  _S2APP_Update_Slope_default_instance_.DefaultConstruct();
  _S2APP_Add_Sensor_default_instance_.DefaultConstruct();
  _S2APP_Del_Sensor_default_instance_.DefaultConstruct();
  _S2APP_Update_Sensor_default_instance_.DefaultConstruct();
  _S2APP_Modify_Password_Result_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031App_Server_Protocol.proto\022\027APP_SERVER_"
      "NET_Protocol\"0\n\013App2S_Login\022\017\n\007account\030\001"
      " \002(\014\022\020\n\010password\030\002 \002(\014\"-\n\030APP2S_Request_"
      "Slope_List\022\021\n\tserver_id\030\001 \002(\r\"B\n\031APP2S_R"
      "equest_Sensor_List\022\020\n\010slope_id\030\001 \002(\r\022\023\n\013"
      "sensor_type\030\002 \002(\r\"W\n\034APP2S_Request_Senso"
      "r_History\022\021\n\tsensor_id\030\001 \002(\r\022\022\n\nbegin_ti"
      "me\030\002 \002(\r\022\020\n\010end_time\030\003 \002(\r\"q\n\017APP2S_Add_"
      "Slope\022\014\n\004type\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\021\n\tlon"
      "gitude\030\003 \002(\001\022\020\n\010latitude\030\004 \002(\001\022\013\n\003url\030\005 "
      "\002(\014\022\020\n\010scene_id\030\006 \002(\r\"\035\n\017APP2S_Del_Slope"
      "\022\n\n\002id\030\001 \002(\r\"\205\001\n\027APP2S_Update_Slope_Data"
      "\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\014\n\004name\030\003 \002(\014"
      "\022\021\n\tlongitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002(\001\022\013\n"
      "\003url\030\006 \002(\014\022\020\n\010scene_id\030\007 \002(\r\"\213\001\n\020APP2S_A"
      "dd_Sensor\022\014\n\004type\030\001 \002(\r\022\020\n\010slope_id\030\002 \002("
      "\r\022\021\n\tlongitude\030\003 \002(\001\022\020\n\010latitude\030\004 \002(\001\022\013"
      "\n\003url\030\005 \002(\014\022\023\n\013description\030\006 \002(\014\022\020\n\010scen"
      "e_id\030\007 \002(\r\"\036\n\020APP2S_Del_Sensor\022\n\n\002id\030\001 \002"
      "(\r\"\237\001\n\030APP2S_Update_Sensor_Data\022\n\n\002id\030\001 "
      "\002(\r\022\014\n\004type\030\002 \002(\r\022\020\n\010slope_id\030\003 \002(\r\022\021\n\tl"
      "ongitude\030\004 \002(\001\022\020\n\010latitude\030\005 \002(\001\022\013\n\003url\030"
      "\006 \002(\014\022\023\n\013description\030\007 \002(\014\022\020\n\010scene_id\030\010"
      " \002(\r\">\n\025APP2S_Modify_Password\022\017\n\007account"
      "\030\001 \002(\014\022\024\n\014new_password\030\002 \002(\014\"8\n\020APP2S_Fi"
      "nd_Slope\022\020\n\010slope_id\030\001 \002(\r\022\022\n\nslope_name"
      "\030\002 \002(\014\"a\n\021APP2S_Find_Sensor\022\020\n\010slope_id\030"
      "\001 \002(\r\022\022\n\nslope_name\030\002 \002(\014\022\021\n\tsensor_id\030\003"
      " \002(\r\022\023\n\013sensor_type\030\004 \002(\r\"\245\001\n\022S2App_Logi"
      "n_Result\022\016\n\006result\030\001 \002(\r\022K\n\013server_list\030"
      "\002 \003(\01326.APP_SERVER_NET_Protocol.S2App_Lo"
      "gin_Result.ServerData\0322\n\nServerData\022\n\n\002i"
      "d\030\001 \002(\r\022\n\n\002ip\030\002 \002(\014\022\014\n\004port\030\003 \002(\r\"\344\001\n\020S2"
      "App_Slope_List\022G\n\nslope_list\030\001 \003(\01323.APP"
      "_SERVER_NET_Protocol.S2App_Slope_List.Sl"
      "opeData\032\206\001\n\tSlopeData\022\n\n\002id\030\001 \002(\r\022\014\n\004typ"
      "e\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\r\n\005state\030\004 \002(\r\022\021\n\t"
      "longitude\030\005 \002(\001\022\020\n\010latitude\030\006 \002(\001\022\013\n\003url"
      "\030\007 \001(\014\022\020\n\010scene_id\030\010 \001(\r\"\277\003\n\021S2App_Senso"
      "r_List\022J\n\013sensor_list\030\001 \003(\01325.APP_SERVER"
      "_NET_Protocol.S2App_Sensor_List.SensorDa"
      "ta\032\335\002\n\nSensorData\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 "
      "\002(\r\022\r\n\005state\030\003 \002(\r\022\020\n\010slope_id\030\004 \002(\r\022\021\n\t"
      "longitude\030\005 \002(\001\022\020\n\010latitude\030\006 \002(\001\022\022\n\ncur"
      "_value1\030\007 \002(\001\022\022\n\ncur_value2\030\010 \002(\001\022\022\n\ncur"
      "_value3\030\t \002(\001\022\022\n\navg_value1\030\n \002(\001\022\022\n\navg"
      "_value2\030\013 \002(\001\022\022\n\navg_value3\030\014 \002(\001\022\025\n\roff"
      "set_value1\030\r \002(\001\022\025\n\roffset_value2\030\016 \002(\001\022"
      "\025\n\roffset_value3\030\017 \002(\001\022\013\n\003url\030\020 \002(\014\022\023\n\013d"
      "escription\030\021 \002(\014\022\020\n\010scene_id\030\022 \002(\r\"\307\004\n\024S"
      "2App_Sensor_History\022\n\n\002id\030\001 \002(\r\022\021\n\tlongi"
      "tude\030\002 \002(\001\022\020\n\010latitude\030\003 \002(\001\022\022\n\nbegin_ti"
      "me\030\004 \002(\r\022\020\n\010end_time\030\005 \002(\r\022\021\n\tinvterval\030"
      "\006 \002(\r\022\022\n\navg_value1\030\007 \002(\001\022\022\n\navg_value2\030"
      "\010 \002(\001\022\022\n\navg_value3\030\t \002(\001\022N\n\014history_lis"
      "t\030\n \003(\01328.APP_SERVER_NET_Protocol.S2App_"
      "Sensor_History.SensorData\022\020\n\010scene_id\030\013 "
      "\002(\r\032\246\002\n\nSensorData\022\022\n\nmin_value1\030\001 \002(\001\022\022"
      "\n\nmin_value2\030\002 \002(\001\022\022\n\nmin_value3\030\003 \002(\001\022\022"
      "\n\nmax_value1\030\004 \002(\001\022\022\n\nmax_value2\030\005 \002(\001\022\022"
      "\n\nmax_value3\030\006 \002(\001\022\031\n\021min_offset_value1\030"
      "\007 \002(\001\022\031\n\021min_offset_value2\030\010 \002(\001\022\031\n\021min_"
      "offset_value3\030\t \002(\001\022\031\n\021max_offset_value1"
      "\030\n \002(\001\022\031\n\021max_offset_value2\030\013 \002(\001\022\031\n\021max"
      "_offset_value3\030\014 \002(\001\"!\n\013S2APP_ERROR\022\022\n\ne"
      "rror_code\030\001 \002(\r\"\214\001\n\017S2APP_New_Slope\022\n\n\002i"
      "d\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\r\n\005s"
      "tate\030\004 \002(\r\022\021\n\tlongitude\030\005 \002(\001\022\020\n\010latitud"
      "e\030\006 \002(\001\022\013\n\003url\030\007 \002(\014\022\020\n\010scene_id\030\010 \002(\r\"!"
      "\n\017S2APP_Del_Slope\022\016\n\006result\030\001 \002(\r\"\217\001\n\022S2"
      "APP_Update_Slope\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002"
      "(\r\022\014\n\004name\030\003 \002(\014\022\r\n\005state\030\004 \002(\r\022\021\n\tlongi"
      "tude\030\005 \002(\001\022\020\n\010latitude\030\006 \002(\001\022\013\n\003url\030\007 \002("
      "\014\022\020\n\010scene_id\030\010 \002(\r\"\246\001\n\020S2APP_Add_Sensor"
      "\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\r\n\005state\030\003 \002("
      "\r\022\020\n\010slope_id\030\004 \002(\r\022\021\n\tlongitude\030\005 \002(\001\022\020"
      "\n\010latitude\030\006 \002(\001\022\013\n\003url\030\007 \002(\014\022\023\n\013descrip"
      "tion\030\010 \002(\014\022\020\n\010scene_id\030\t \002(\r\"\"\n\020S2APP_De"
      "l_Sensor\022\016\n\006result\030\001 \002(\r\"\251\001\n\023S2APP_Updat"
      "e_Sensor\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\r\n\005st"
      "ate\030\003 \002(\r\022\020\n\010slope_id\030\004 \002(\r\022\021\n\tlongitude"
      "\030\005 \002(\001\022\020\n\010latitude\030\006 \002(\001\022\013\n\003url\030\007 \002(\014\022\023\n"
      "\013description\030\010 \002(\014\022\020\n\010scene_id\030\t \002(\r\".\n\034"
      "S2APP_Modify_Password_Result\022\016\n\006result\030\001"
      " \002(\r*\214\003\n\005APP2S\022\017\n\013app2s_login\020\000\022\034\n\030app2s"
      "_request_slope_list\020\001\022\035\n\031app2s_request_s"
      "ensor_list\020\002\022 \n\034app2s_request_sensor_his"
      "tory\020\003\022\016\n\napp2s_ping\020\004\022\032\n\026app2s_request_"
      "all_list\020\005\022\023\n\017app2s_add_slope\020\006\022\023\n\017app2s"
      "_del_slope\020\007\022\033\n\027app2s_update_slope_data\020"
      "\010\022\024\n\020app2s_add_sensor\020\t\022\024\n\020app2s_del_sen"
      "sor\020\n\022\034\n\030app2s_update_sensor_data\020\013\022\031\n\025a"
      "pp2s_modify_password\020\014\022\024\n\020app2s_find_slo"
      "pe\020\r\022\025\n\021app2s_find_sensor\020\016\022\016\n\tapp2s_max"
      "\020\200\002*\310\002\n\005S2APP\022\026\n\022s2app_login_result\020\000\022\024\n"
      "\020s2app_slope_list\020\001\022\025\n\021s2app_sensor_list"
      "\020\002\022\030\n\024s2app_sensor_history\020\003\022\026\n\022s2app_al"
      "l_list_end\020\004\022\017\n\013s2app_error\020\005\022\023\n\017s2app_n"
      "ew_slope\020\006\022\023\n\017s2app_del_slope\020\007\022\026\n\022s2app"
      "_update_slope\020\010\022\024\n\020s2app_add_sensor\020\t\022\024\n"
      "\020s2app_del_sensor\020\n\022\027\n\023s2app_update_sens"
      "or\020\013\022 \n\034s2app_modify_password_result\020\014\022\016"
      "\n\ts2app_max\020\200\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "App_Server_Protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_App_5fServer_5fProtocol_2eproto

const ::google::protobuf::EnumDescriptor* APP2S_descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_enum_descriptors[0];
}
bool APP2S_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* S2APP_descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_enum_descriptors[1];
}
bool S2APP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 256:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int App2S_Login::kAccountFieldNumber;
const int App2S_Login::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

App2S_Login::App2S_Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.App2S_Login)
}
App2S_Login::App2S_Login(const App2S_Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.App2S_Login)
}

void App2S_Login::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

App2S_Login::~App2S_Login() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.App2S_Login)
  SharedDtor();
}

void App2S_Login::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void App2S_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App2S_Login::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const App2S_Login& App2S_Login::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

App2S_Login* App2S_Login::New(::google::protobuf::Arena* arena) const {
  App2S_Login* n = new App2S_Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void App2S_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.App2S_Login)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool App2S_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.App2S_Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.App2S_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.App2S_Login)
  return false;
#undef DO_
}

void App2S_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.App2S_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // required bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.App2S_Login)
}

::google::protobuf::uint8* App2S_Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.App2S_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.App2S_Login)
  return target;
}

size_t App2S_Login::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.App2S_Login)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_password()) {
    // required bytes password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  return total_size;
}
size_t App2S_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.App2S_Login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required bytes password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App2S_Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.App2S_Login)
  GOOGLE_DCHECK_NE(&from, this);
  const App2S_Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const App2S_Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.App2S_Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.App2S_Login)
    MergeFrom(*source);
  }
}

void App2S_Login::MergeFrom(const App2S_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.App2S_Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
}

void App2S_Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.App2S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App2S_Login::CopyFrom(const App2S_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.App2S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App2S_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void App2S_Login::Swap(App2S_Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void App2S_Login::InternalSwap(App2S_Login* other) {
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata App2S_Login::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// App2S_Login

// required bytes account = 1;
bool App2S_Login::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void App2S_Login::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void App2S_Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void App2S_Login::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& App2S_Login::account() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.App2S_Login.account)
  return account_.GetNoArena();
}
void App2S_Login::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.App2S_Login.account)
}
#if LANG_CXX11
void App2S_Login::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.App2S_Login.account)
}
#endif
void App2S_Login::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.App2S_Login.account)
}
void App2S_Login::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.App2S_Login.account)
}
::std::string* App2S_Login::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.App2S_Login.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* App2S_Login::release_account() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.App2S_Login.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void App2S_Login::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.App2S_Login.account)
}

// required bytes password = 2;
bool App2S_Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void App2S_Login::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void App2S_Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void App2S_Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& App2S_Login::password() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.App2S_Login.password)
  return password_.GetNoArena();
}
void App2S_Login::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.App2S_Login.password)
}
#if LANG_CXX11
void App2S_Login::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.App2S_Login.password)
}
#endif
void App2S_Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.App2S_Login.password)
}
void App2S_Login::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.App2S_Login.password)
}
::std::string* App2S_Login::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.App2S_Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* App2S_Login::release_password() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.App2S_Login.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void App2S_Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.App2S_Login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Request_Slope_List::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Request_Slope_List::APP2S_Request_Slope_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
}
APP2S_Request_Slope_List::APP2S_Request_Slope_List(const APP2S_Request_Slope_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
}

void APP2S_Request_Slope_List::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
}

APP2S_Request_Slope_List::~APP2S_Request_Slope_List() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  SharedDtor();
}

void APP2S_Request_Slope_List::SharedDtor() {
}

void APP2S_Request_Slope_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Request_Slope_List::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Request_Slope_List& APP2S_Request_Slope_List::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Request_Slope_List* APP2S_Request_Slope_List::New(::google::protobuf::Arena* arena) const {
  APP2S_Request_Slope_List* n = new APP2S_Request_Slope_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Request_Slope_List::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  server_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Request_Slope_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  return false;
#undef DO_
}

void APP2S_Request_Slope_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 server_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
}

::google::protobuf::uint8* APP2S_Request_Slope_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 server_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  return target;
}

size_t APP2S_Request_Slope_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 server_id = 1;
  if (has_server_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Request_Slope_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Request_Slope_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Request_Slope_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
    MergeFrom(*source);
  }
}

void APP2S_Request_Slope_List::MergeFrom(const APP2S_Request_Slope_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    set_server_id(from.server_id());
  }
}

void APP2S_Request_Slope_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Request_Slope_List::CopyFrom(const APP2S_Request_Slope_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Request_Slope_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void APP2S_Request_Slope_List::Swap(APP2S_Request_Slope_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Request_Slope_List::InternalSwap(APP2S_Request_Slope_List* other) {
  std::swap(server_id_, other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Request_Slope_List::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Request_Slope_List

// required uint32 server_id = 1;
bool APP2S_Request_Slope_List::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Request_Slope_List::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Request_Slope_List::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Request_Slope_List::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
::google::protobuf::uint32 APP2S_Request_Slope_List::server_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List.server_id)
  return server_id_;
}
void APP2S_Request_Slope_List::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Request_Slope_List.server_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Request_Sensor_List::kSlopeIdFieldNumber;
const int APP2S_Request_Sensor_List::kSensorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Request_Sensor_List::APP2S_Request_Sensor_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
}
APP2S_Request_Sensor_List::APP2S_Request_Sensor_List(const APP2S_Request_Sensor_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slope_id_, &from.slope_id_,
    reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&slope_id_) + sizeof(sensor_type_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
}

void APP2S_Request_Sensor_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&slope_id_, 0, reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&slope_id_) + sizeof(sensor_type_));
}

APP2S_Request_Sensor_List::~APP2S_Request_Sensor_List() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  SharedDtor();
}

void APP2S_Request_Sensor_List::SharedDtor() {
}

void APP2S_Request_Sensor_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Request_Sensor_List::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Request_Sensor_List& APP2S_Request_Sensor_List::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Request_Sensor_List* APP2S_Request_Sensor_List::New(::google::protobuf::Arena* arena) const {
  APP2S_Request_Sensor_List* n = new APP2S_Request_Sensor_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Request_Sensor_List::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&slope_id_, 0, reinterpret_cast<char*>(&sensor_type_) -
      reinterpret_cast<char*>(&slope_id_) + sizeof(sensor_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Request_Sensor_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slope_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sensor_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sensor_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  return false;
#undef DO_
}

void APP2S_Request_Sensor_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 slope_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slope_id(), output);
  }

  // required uint32 sensor_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensor_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
}

::google::protobuf::uint8* APP2S_Request_Sensor_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 slope_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slope_id(), target);
  }

  // required uint32 sensor_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensor_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  return target;
}

size_t APP2S_Request_Sensor_List::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  size_t total_size = 0;

  if (has_slope_id()) {
    // required uint32 slope_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_sensor_type()) {
    // required uint32 sensor_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_type());
  }

  return total_size;
}
size_t APP2S_Request_Sensor_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 slope_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required uint32 sensor_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Request_Sensor_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Request_Sensor_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Request_Sensor_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
    MergeFrom(*source);
  }
}

void APP2S_Request_Sensor_List::MergeFrom(const APP2S_Request_Sensor_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_type_ = from.sensor_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Request_Sensor_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Request_Sensor_List::CopyFrom(const APP2S_Request_Sensor_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Request_Sensor_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void APP2S_Request_Sensor_List::Swap(APP2S_Request_Sensor_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Request_Sensor_List::InternalSwap(APP2S_Request_Sensor_List* other) {
  std::swap(slope_id_, other->slope_id_);
  std::swap(sensor_type_, other->sensor_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Request_Sensor_List::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Request_Sensor_List

// required uint32 slope_id = 1;
bool APP2S_Request_Sensor_List::has_slope_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Request_Sensor_List::set_has_slope_id() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Request_Sensor_List::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Request_Sensor_List::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 APP2S_Request_Sensor_List::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List.slope_id)
  return slope_id_;
}
void APP2S_Request_Sensor_List::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List.slope_id)
}

// required uint32 sensor_type = 2;
bool APP2S_Request_Sensor_List::has_sensor_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Request_Sensor_List::set_has_sensor_type() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Request_Sensor_List::clear_has_sensor_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Request_Sensor_List::clear_sensor_type() {
  sensor_type_ = 0u;
  clear_has_sensor_type();
}
::google::protobuf::uint32 APP2S_Request_Sensor_List::sensor_type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List.sensor_type)
  return sensor_type_;
}
void APP2S_Request_Sensor_List::set_sensor_type(::google::protobuf::uint32 value) {
  set_has_sensor_type();
  sensor_type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_List.sensor_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Request_Sensor_History::kSensorIdFieldNumber;
const int APP2S_Request_Sensor_History::kBeginTimeFieldNumber;
const int APP2S_Request_Sensor_History::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Request_Sensor_History::APP2S_Request_Sensor_History()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
}
APP2S_Request_Sensor_History::APP2S_Request_Sensor_History(const APP2S_Request_Sensor_History& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_id_, &from.sensor_id_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&sensor_id_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
}

void APP2S_Request_Sensor_History::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sensor_id_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&sensor_id_) + sizeof(end_time_));
}

APP2S_Request_Sensor_History::~APP2S_Request_Sensor_History() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  SharedDtor();
}

void APP2S_Request_Sensor_History::SharedDtor() {
}

void APP2S_Request_Sensor_History::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Request_Sensor_History::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Request_Sensor_History& APP2S_Request_Sensor_History::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Request_Sensor_History* APP2S_Request_Sensor_History::New(::google::protobuf::Arena* arena) const {
  APP2S_Request_Sensor_History* n = new APP2S_Request_Sensor_History;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Request_Sensor_History::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sensor_id_, 0, reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&sensor_id_) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Request_Sensor_History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sensor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 begin_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  return false;
#undef DO_
}

void APP2S_Request_Sensor_History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor_id(), output);
  }

  // required uint32 begin_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // required uint32 end_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
}

::google::protobuf::uint8* APP2S_Request_Sensor_History::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor_id(), target);
  }

  // required uint32 begin_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // required uint32 end_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  return target;
}

size_t APP2S_Request_Sensor_History::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  size_t total_size = 0;

  if (has_sensor_id()) {
    // required uint32 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  if (has_begin_time()) {
    // required uint32 begin_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  if (has_end_time()) {
    // required uint32 end_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  return total_size;
}
size_t APP2S_Request_Sensor_History::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 sensor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());

    // required uint32 begin_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());

    // required uint32 end_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Request_Sensor_History::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Request_Sensor_History* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Request_Sensor_History>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
    MergeFrom(*source);
  }
}

void APP2S_Request_Sensor_History::MergeFrom(const APP2S_Request_Sensor_History& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Request_Sensor_History::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Request_Sensor_History::CopyFrom(const APP2S_Request_Sensor_History& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Request_Sensor_History::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void APP2S_Request_Sensor_History::Swap(APP2S_Request_Sensor_History* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Request_Sensor_History::InternalSwap(APP2S_Request_Sensor_History* other) {
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Request_Sensor_History::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Request_Sensor_History

// required uint32 sensor_id = 1;
bool APP2S_Request_Sensor_History::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Request_Sensor_History::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Request_Sensor_History::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Request_Sensor_History::clear_sensor_id() {
  sensor_id_ = 0u;
  clear_has_sensor_id();
}
::google::protobuf::uint32 APP2S_Request_Sensor_History::sensor_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History.sensor_id)
  return sensor_id_;
}
void APP2S_Request_Sensor_History::set_sensor_id(::google::protobuf::uint32 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History.sensor_id)
}

// required uint32 begin_time = 2;
bool APP2S_Request_Sensor_History::has_begin_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Request_Sensor_History::set_has_begin_time() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Request_Sensor_History::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Request_Sensor_History::clear_begin_time() {
  begin_time_ = 0u;
  clear_has_begin_time();
}
::google::protobuf::uint32 APP2S_Request_Sensor_History::begin_time() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History.begin_time)
  return begin_time_;
}
void APP2S_Request_Sensor_History::set_begin_time(::google::protobuf::uint32 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History.begin_time)
}

// required uint32 end_time = 3;
bool APP2S_Request_Sensor_History::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void APP2S_Request_Sensor_History::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
void APP2S_Request_Sensor_History::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void APP2S_Request_Sensor_History::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
::google::protobuf::uint32 APP2S_Request_Sensor_History::end_time() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History.end_time)
  return end_time_;
}
void APP2S_Request_Sensor_History::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Request_Sensor_History.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Add_Slope::kTypeFieldNumber;
const int APP2S_Add_Slope::kNameFieldNumber;
const int APP2S_Add_Slope::kLongitudeFieldNumber;
const int APP2S_Add_Slope::kLatitudeFieldNumber;
const int APP2S_Add_Slope::kUrlFieldNumber;
const int APP2S_Add_Slope::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Add_Slope::APP2S_Add_Slope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
}
APP2S_Add_Slope::APP2S_Add_Slope(const APP2S_Add_Slope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
}

void APP2S_Add_Slope::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
}

APP2S_Add_Slope::~APP2S_Add_Slope() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  SharedDtor();
}

void APP2S_Add_Slope::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Add_Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Add_Slope::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Add_Slope& APP2S_Add_Slope::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Add_Slope* APP2S_Add_Slope::New(::google::protobuf::Arena* arena) const {
  APP2S_Add_Slope* n = new APP2S_Add_Slope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Add_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Add_Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  return false;
#undef DO_
}

void APP2S_Add_Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // required bytes url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->url(), output);
  }

  // required uint32 scene_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
}

::google::protobuf::uint8* APP2S_Add_Slope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // required bytes url = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->url(), target);
  }

  // required uint32 scene_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  return target;
}

size_t APP2S_Add_Slope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_url()) {
    // required bytes url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_longitude()) {
    // required double longitude = 3;
    total_size += 1 + 8;
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t APP2S_Add_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required double longitude = 3;
    total_size += 1 + 8;

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 scene_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

    // required double latitude = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Add_Slope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Add_Slope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Add_Slope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
    MergeFrom(*source);
  }
}

void APP2S_Add_Slope::MergeFrom(const APP2S_Add_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_id_ = from.scene_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Add_Slope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Add_Slope::CopyFrom(const APP2S_Add_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Add_Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void APP2S_Add_Slope::Swap(APP2S_Add_Slope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Add_Slope::InternalSwap(APP2S_Add_Slope* other) {
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  std::swap(longitude_, other->longitude_);
  std::swap(type_, other->type_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(latitude_, other->latitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Add_Slope::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Add_Slope

// required uint32 type = 1;
bool APP2S_Add_Slope::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void APP2S_Add_Slope::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void APP2S_Add_Slope::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void APP2S_Add_Slope::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 APP2S_Add_Slope::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Slope.type)
  return type_;
}
void APP2S_Add_Slope::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Slope.type)
}

// required bytes name = 2;
bool APP2S_Add_Slope::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Add_Slope::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Add_Slope::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Add_Slope::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& APP2S_Add_Slope::name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
  return name_.GetNoArena();
}
void APP2S_Add_Slope::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
}
#if LANG_CXX11
void APP2S_Add_Slope::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
}
#endif
void APP2S_Add_Slope::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
}
void APP2S_Add_Slope::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
}
::std::string* APP2S_Add_Slope::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Add_Slope::release_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Add_Slope::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Add_Slope.name)
}

// required double longitude = 3;
bool APP2S_Add_Slope::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void APP2S_Add_Slope::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void APP2S_Add_Slope::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void APP2S_Add_Slope::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double APP2S_Add_Slope::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Slope.longitude)
  return longitude_;
}
void APP2S_Add_Slope::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Slope.longitude)
}

// required double latitude = 4;
bool APP2S_Add_Slope::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void APP2S_Add_Slope::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void APP2S_Add_Slope::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void APP2S_Add_Slope::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double APP2S_Add_Slope::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Slope.latitude)
  return latitude_;
}
void APP2S_Add_Slope::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Slope.latitude)
}

// required bytes url = 5;
bool APP2S_Add_Slope::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Add_Slope::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Add_Slope::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Add_Slope::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& APP2S_Add_Slope::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
  return url_.GetNoArena();
}
void APP2S_Add_Slope::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
}
#if LANG_CXX11
void APP2S_Add_Slope::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
}
#endif
void APP2S_Add_Slope::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
}
void APP2S_Add_Slope::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
}
::std::string* APP2S_Add_Slope::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Add_Slope::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Add_Slope::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Add_Slope.url)
}

// required uint32 scene_id = 6;
bool APP2S_Add_Slope::has_scene_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void APP2S_Add_Slope::set_has_scene_id() {
  _has_bits_[0] |= 0x00000010u;
}
void APP2S_Add_Slope::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void APP2S_Add_Slope::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 APP2S_Add_Slope::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Slope.scene_id)
  return scene_id_;
}
void APP2S_Add_Slope::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Slope.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Del_Slope::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Del_Slope::APP2S_Del_Slope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
}
APP2S_Del_Slope::APP2S_Del_Slope(const APP2S_Del_Slope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
}

void APP2S_Del_Slope::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

APP2S_Del_Slope::~APP2S_Del_Slope() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  SharedDtor();
}

void APP2S_Del_Slope::SharedDtor() {
}

void APP2S_Del_Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Del_Slope::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Del_Slope& APP2S_Del_Slope::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Del_Slope* APP2S_Del_Slope::New(::google::protobuf::Arena* arena) const {
  APP2S_Del_Slope* n = new APP2S_Del_Slope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Del_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Del_Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  return false;
#undef DO_
}

void APP2S_Del_Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
}

::google::protobuf::uint8* APP2S_Del_Slope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  return target;
}

size_t APP2S_Del_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Del_Slope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Del_Slope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Del_Slope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
    MergeFrom(*source);
  }
}

void APP2S_Del_Slope::MergeFrom(const APP2S_Del_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void APP2S_Del_Slope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Del_Slope::CopyFrom(const APP2S_Del_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Del_Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void APP2S_Del_Slope::Swap(APP2S_Del_Slope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Del_Slope::InternalSwap(APP2S_Del_Slope* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Del_Slope::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Del_Slope

// required uint32 id = 1;
bool APP2S_Del_Slope::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Del_Slope::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Del_Slope::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Del_Slope::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 APP2S_Del_Slope::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Del_Slope.id)
  return id_;
}
void APP2S_Del_Slope::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Del_Slope.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Update_Slope_Data::kIdFieldNumber;
const int APP2S_Update_Slope_Data::kTypeFieldNumber;
const int APP2S_Update_Slope_Data::kNameFieldNumber;
const int APP2S_Update_Slope_Data::kLongitudeFieldNumber;
const int APP2S_Update_Slope_Data::kLatitudeFieldNumber;
const int APP2S_Update_Slope_Data::kUrlFieldNumber;
const int APP2S_Update_Slope_Data::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Update_Slope_Data::APP2S_Update_Slope_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
}
APP2S_Update_Slope_Data::APP2S_Update_Slope_Data(const APP2S_Update_Slope_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
}

void APP2S_Update_Slope_Data::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

APP2S_Update_Slope_Data::~APP2S_Update_Slope_Data() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  SharedDtor();
}

void APP2S_Update_Slope_Data::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Update_Slope_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Update_Slope_Data::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Update_Slope_Data& APP2S_Update_Slope_Data::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Update_Slope_Data* APP2S_Update_Slope_Data::New(::google::protobuf::Arena* arena) const {
  APP2S_Update_Slope_Data* n = new APP2S_Update_Slope_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Update_Slope_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Update_Slope_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  return false;
#undef DO_
}

void APP2S_Update_Slope_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // required bytes url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->url(), output);
  }

  // required uint32 scene_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
}

::google::protobuf::uint8* APP2S_Update_Slope_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // required bytes url = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->url(), target);
  }

  // required uint32 scene_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  return target;
}

size_t APP2S_Update_Slope_Data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_url()) {
    // required bytes url = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t APP2S_Update_Slope_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes url = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required uint32 scene_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Update_Slope_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Update_Slope_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Update_Slope_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
    MergeFrom(*source);
  }
}

void APP2S_Update_Slope_Data::MergeFrom(const APP2S_Update_Slope_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Update_Slope_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Update_Slope_Data::CopyFrom(const APP2S_Update_Slope_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Update_Slope_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void APP2S_Update_Slope_Data::Swap(APP2S_Update_Slope_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Update_Slope_Data::InternalSwap(APP2S_Update_Slope_Data* other) {
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Update_Slope_Data::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Update_Slope_Data

// required uint32 id = 1;
bool APP2S_Update_Slope_Data::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void APP2S_Update_Slope_Data::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void APP2S_Update_Slope_Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void APP2S_Update_Slope_Data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 APP2S_Update_Slope_Data::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.id)
  return id_;
}
void APP2S_Update_Slope_Data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.id)
}

// required uint32 type = 2;
bool APP2S_Update_Slope_Data::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void APP2S_Update_Slope_Data::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void APP2S_Update_Slope_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void APP2S_Update_Slope_Data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 APP2S_Update_Slope_Data::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.type)
  return type_;
}
void APP2S_Update_Slope_Data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.type)
}

// required bytes name = 3;
bool APP2S_Update_Slope_Data::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Update_Slope_Data::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Update_Slope_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Update_Slope_Data::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& APP2S_Update_Slope_Data::name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
  return name_.GetNoArena();
}
void APP2S_Update_Slope_Data::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
}
#if LANG_CXX11
void APP2S_Update_Slope_Data::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
}
#endif
void APP2S_Update_Slope_Data::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
}
void APP2S_Update_Slope_Data::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
}
::std::string* APP2S_Update_Slope_Data::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Update_Slope_Data::release_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Update_Slope_Data::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.name)
}

// required double longitude = 4;
bool APP2S_Update_Slope_Data::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void APP2S_Update_Slope_Data::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void APP2S_Update_Slope_Data::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void APP2S_Update_Slope_Data::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double APP2S_Update_Slope_Data::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.longitude)
  return longitude_;
}
void APP2S_Update_Slope_Data::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.longitude)
}

// required double latitude = 5;
bool APP2S_Update_Slope_Data::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void APP2S_Update_Slope_Data::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void APP2S_Update_Slope_Data::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void APP2S_Update_Slope_Data::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double APP2S_Update_Slope_Data::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.latitude)
  return latitude_;
}
void APP2S_Update_Slope_Data::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.latitude)
}

// required bytes url = 6;
bool APP2S_Update_Slope_Data::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Update_Slope_Data::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Update_Slope_Data::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Update_Slope_Data::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& APP2S_Update_Slope_Data::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
  return url_.GetNoArena();
}
void APP2S_Update_Slope_Data::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
}
#if LANG_CXX11
void APP2S_Update_Slope_Data::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
}
#endif
void APP2S_Update_Slope_Data::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
}
void APP2S_Update_Slope_Data::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
}
::std::string* APP2S_Update_Slope_Data::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Update_Slope_Data::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Update_Slope_Data::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.url)
}

// required uint32 scene_id = 7;
bool APP2S_Update_Slope_Data::has_scene_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void APP2S_Update_Slope_Data::set_has_scene_id() {
  _has_bits_[0] |= 0x00000040u;
}
void APP2S_Update_Slope_Data::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void APP2S_Update_Slope_Data::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 APP2S_Update_Slope_Data::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.scene_id)
  return scene_id_;
}
void APP2S_Update_Slope_Data::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Slope_Data.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Add_Sensor::kTypeFieldNumber;
const int APP2S_Add_Sensor::kSlopeIdFieldNumber;
const int APP2S_Add_Sensor::kLongitudeFieldNumber;
const int APP2S_Add_Sensor::kLatitudeFieldNumber;
const int APP2S_Add_Sensor::kUrlFieldNumber;
const int APP2S_Add_Sensor::kDescriptionFieldNumber;
const int APP2S_Add_Sensor::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Add_Sensor::APP2S_Add_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
}
APP2S_Add_Sensor::APP2S_Add_Sensor(const APP2S_Add_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
}

void APP2S_Add_Sensor::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(scene_id_));
}

APP2S_Add_Sensor::~APP2S_Add_Sensor() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  SharedDtor();
}

void APP2S_Add_Sensor::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Add_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Add_Sensor::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Add_Sensor& APP2S_Add_Sensor::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Add_Sensor* APP2S_Add_Sensor::New(::google::protobuf::Arena* arena) const {
  APP2S_Add_Sensor* n = new APP2S_Add_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Add_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&type_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Add_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slope_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  return false;
#undef DO_
}

void APP2S_Add_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 slope_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slope_id(), output);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // required bytes url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->url(), output);
  }

  // required bytes description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->description(), output);
  }

  // required uint32 scene_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
}

::google::protobuf::uint8* APP2S_Add_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 slope_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slope_id(), target);
  }

  // required double longitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // required bytes url = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->url(), target);
  }

  // required bytes description = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->description(), target);
  }

  // required uint32 scene_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  return target;
}

size_t APP2S_Add_Sensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  size_t total_size = 0;

  if (has_url()) {
    // required bytes url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_description()) {
    // required bytes description = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_longitude()) {
    // required double longitude = 3;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t APP2S_Add_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required bytes description = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 slope_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required double longitude = 3;
    total_size += 1 + 8;

    // required double latitude = 4;
    total_size += 1 + 8;

    // required uint32 scene_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Add_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Add_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Add_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
    MergeFrom(*source);
  }
}

void APP2S_Add_Sensor::MergeFrom(const APP2S_Add_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Add_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Add_Sensor::CopyFrom(const APP2S_Add_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Add_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Add_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void APP2S_Add_Sensor::Swap(APP2S_Add_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Add_Sensor::InternalSwap(APP2S_Add_Sensor* other) {
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  std::swap(type_, other->type_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Add_Sensor::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Add_Sensor

// required uint32 type = 1;
bool APP2S_Add_Sensor::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void APP2S_Add_Sensor::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void APP2S_Add_Sensor::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void APP2S_Add_Sensor::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 APP2S_Add_Sensor::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.type)
  return type_;
}
void APP2S_Add_Sensor::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.type)
}

// required uint32 slope_id = 2;
bool APP2S_Add_Sensor::has_slope_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void APP2S_Add_Sensor::set_has_slope_id() {
  _has_bits_[0] |= 0x00000008u;
}
void APP2S_Add_Sensor::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void APP2S_Add_Sensor::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 APP2S_Add_Sensor::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.slope_id)
  return slope_id_;
}
void APP2S_Add_Sensor::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.slope_id)
}

// required double longitude = 3;
bool APP2S_Add_Sensor::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void APP2S_Add_Sensor::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void APP2S_Add_Sensor::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void APP2S_Add_Sensor::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double APP2S_Add_Sensor::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.longitude)
  return longitude_;
}
void APP2S_Add_Sensor::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.longitude)
}

// required double latitude = 4;
bool APP2S_Add_Sensor::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void APP2S_Add_Sensor::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void APP2S_Add_Sensor::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void APP2S_Add_Sensor::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double APP2S_Add_Sensor::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.latitude)
  return latitude_;
}
void APP2S_Add_Sensor::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.latitude)
}

// required bytes url = 5;
bool APP2S_Add_Sensor::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Add_Sensor::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Add_Sensor::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Add_Sensor::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& APP2S_Add_Sensor::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
  return url_.GetNoArena();
}
void APP2S_Add_Sensor::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
}
#if LANG_CXX11
void APP2S_Add_Sensor::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
}
#endif
void APP2S_Add_Sensor::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
}
void APP2S_Add_Sensor::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
}
::std::string* APP2S_Add_Sensor::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Add_Sensor::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Add_Sensor::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.url)
}

// required bytes description = 6;
bool APP2S_Add_Sensor::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Add_Sensor::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Add_Sensor::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Add_Sensor::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& APP2S_Add_Sensor::description() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
  return description_.GetNoArena();
}
void APP2S_Add_Sensor::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
}
#if LANG_CXX11
void APP2S_Add_Sensor::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
}
#endif
void APP2S_Add_Sensor::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
}
void APP2S_Add_Sensor::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
}
::std::string* APP2S_Add_Sensor::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Add_Sensor::release_description() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Add_Sensor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.description)
}

// required uint32 scene_id = 7;
bool APP2S_Add_Sensor::has_scene_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void APP2S_Add_Sensor::set_has_scene_id() {
  _has_bits_[0] |= 0x00000040u;
}
void APP2S_Add_Sensor::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void APP2S_Add_Sensor::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 APP2S_Add_Sensor::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.scene_id)
  return scene_id_;
}
void APP2S_Add_Sensor::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Add_Sensor.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Del_Sensor::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Del_Sensor::APP2S_Del_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
}
APP2S_Del_Sensor::APP2S_Del_Sensor(const APP2S_Del_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
}

void APP2S_Del_Sensor::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

APP2S_Del_Sensor::~APP2S_Del_Sensor() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  SharedDtor();
}

void APP2S_Del_Sensor::SharedDtor() {
}

void APP2S_Del_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Del_Sensor::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Del_Sensor& APP2S_Del_Sensor::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Del_Sensor* APP2S_Del_Sensor::New(::google::protobuf::Arena* arena) const {
  APP2S_Del_Sensor* n = new APP2S_Del_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Del_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Del_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  return false;
#undef DO_
}

void APP2S_Del_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
}

::google::protobuf::uint8* APP2S_Del_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  return target;
}

size_t APP2S_Del_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Del_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Del_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Del_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
    MergeFrom(*source);
  }
}

void APP2S_Del_Sensor::MergeFrom(const APP2S_Del_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void APP2S_Del_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Del_Sensor::CopyFrom(const APP2S_Del_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Del_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Del_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void APP2S_Del_Sensor::Swap(APP2S_Del_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Del_Sensor::InternalSwap(APP2S_Del_Sensor* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Del_Sensor::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Del_Sensor

// required uint32 id = 1;
bool APP2S_Del_Sensor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Del_Sensor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Del_Sensor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Del_Sensor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 APP2S_Del_Sensor::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Del_Sensor.id)
  return id_;
}
void APP2S_Del_Sensor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Del_Sensor.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Update_Sensor_Data::kIdFieldNumber;
const int APP2S_Update_Sensor_Data::kTypeFieldNumber;
const int APP2S_Update_Sensor_Data::kSlopeIdFieldNumber;
const int APP2S_Update_Sensor_Data::kLongitudeFieldNumber;
const int APP2S_Update_Sensor_Data::kLatitudeFieldNumber;
const int APP2S_Update_Sensor_Data::kUrlFieldNumber;
const int APP2S_Update_Sensor_Data::kDescriptionFieldNumber;
const int APP2S_Update_Sensor_Data::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Update_Sensor_Data::APP2S_Update_Sensor_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
}
APP2S_Update_Sensor_Data::APP2S_Update_Sensor_Data(const APP2S_Update_Sensor_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
}

void APP2S_Update_Sensor_Data::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

APP2S_Update_Sensor_Data::~APP2S_Update_Sensor_Data() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  SharedDtor();
}

void APP2S_Update_Sensor_Data::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Update_Sensor_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Update_Sensor_Data::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Update_Sensor_Data& APP2S_Update_Sensor_Data::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Update_Sensor_Data* APP2S_Update_Sensor_Data::New(::google::protobuf::Arena* arena) const {
  APP2S_Update_Sensor_Data* n = new APP2S_Update_Sensor_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Update_Sensor_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Update_Sensor_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slope_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes description = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  return false;
#undef DO_
}

void APP2S_Update_Sensor_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 slope_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slope_id(), output);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // required bytes url = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->url(), output);
  }

  // required bytes description = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->description(), output);
  }

  // required uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
}

::google::protobuf::uint8* APP2S_Update_Sensor_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 slope_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slope_id(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // required bytes url = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->url(), target);
  }

  // required bytes description = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->description(), target);
  }

  // required uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  return target;
}

size_t APP2S_Update_Sensor_Data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  size_t total_size = 0;

  if (has_url()) {
    // required bytes url = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_description()) {
    // required bytes description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 5;
    total_size += 1 + 8;
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t APP2S_Update_Sensor_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes url = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required bytes description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required double longitude = 4;
    total_size += 1 + 8;

    // required double latitude = 5;
    total_size += 1 + 8;

    // required uint32 slope_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required uint32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Update_Sensor_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Update_Sensor_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Update_Sensor_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
    MergeFrom(*source);
  }
}

void APP2S_Update_Sensor_Data::MergeFrom(const APP2S_Update_Sensor_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Update_Sensor_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Update_Sensor_Data::CopyFrom(const APP2S_Update_Sensor_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Update_Sensor_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void APP2S_Update_Sensor_Data::Swap(APP2S_Update_Sensor_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Update_Sensor_Data::InternalSwap(APP2S_Update_Sensor_Data* other) {
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Update_Sensor_Data::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Update_Sensor_Data

// required uint32 id = 1;
bool APP2S_Update_Sensor_Data::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void APP2S_Update_Sensor_Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void APP2S_Update_Sensor_Data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 APP2S_Update_Sensor_Data::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.id)
  return id_;
}
void APP2S_Update_Sensor_Data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.id)
}

// required uint32 type = 2;
bool APP2S_Update_Sensor_Data::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void APP2S_Update_Sensor_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void APP2S_Update_Sensor_Data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 APP2S_Update_Sensor_Data::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.type)
  return type_;
}
void APP2S_Update_Sensor_Data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.type)
}

// required uint32 slope_id = 3;
bool APP2S_Update_Sensor_Data::has_slope_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_slope_id() {
  _has_bits_[0] |= 0x00000040u;
}
void APP2S_Update_Sensor_Data::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void APP2S_Update_Sensor_Data::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 APP2S_Update_Sensor_Data::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.slope_id)
  return slope_id_;
}
void APP2S_Update_Sensor_Data::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.slope_id)
}

// required double longitude = 4;
bool APP2S_Update_Sensor_Data::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void APP2S_Update_Sensor_Data::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void APP2S_Update_Sensor_Data::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double APP2S_Update_Sensor_Data::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.longitude)
  return longitude_;
}
void APP2S_Update_Sensor_Data::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.longitude)
}

// required double latitude = 5;
bool APP2S_Update_Sensor_Data::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void APP2S_Update_Sensor_Data::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void APP2S_Update_Sensor_Data::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double APP2S_Update_Sensor_Data::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.latitude)
  return latitude_;
}
void APP2S_Update_Sensor_Data::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.latitude)
}

// required bytes url = 6;
bool APP2S_Update_Sensor_Data::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Update_Sensor_Data::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Update_Sensor_Data::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& APP2S_Update_Sensor_Data::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
  return url_.GetNoArena();
}
void APP2S_Update_Sensor_Data::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
}
#if LANG_CXX11
void APP2S_Update_Sensor_Data::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
}
#endif
void APP2S_Update_Sensor_Data::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
}
void APP2S_Update_Sensor_Data::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
}
::std::string* APP2S_Update_Sensor_Data::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Update_Sensor_Data::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Update_Sensor_Data::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.url)
}

// required bytes description = 7;
bool APP2S_Update_Sensor_Data::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Update_Sensor_Data::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Update_Sensor_Data::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& APP2S_Update_Sensor_Data::description() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
  return description_.GetNoArena();
}
void APP2S_Update_Sensor_Data::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
}
#if LANG_CXX11
void APP2S_Update_Sensor_Data::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
}
#endif
void APP2S_Update_Sensor_Data::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
}
void APP2S_Update_Sensor_Data::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
}
::std::string* APP2S_Update_Sensor_Data::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Update_Sensor_Data::release_description() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Update_Sensor_Data::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.description)
}

// required uint32 scene_id = 8;
bool APP2S_Update_Sensor_Data::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void APP2S_Update_Sensor_Data::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
void APP2S_Update_Sensor_Data::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void APP2S_Update_Sensor_Data::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 APP2S_Update_Sensor_Data::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.scene_id)
  return scene_id_;
}
void APP2S_Update_Sensor_Data::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Update_Sensor_Data.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Modify_Password::kAccountFieldNumber;
const int APP2S_Modify_Password::kNewPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Modify_Password::APP2S_Modify_Password()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
}
APP2S_Modify_Password::APP2S_Modify_Password(const APP2S_Modify_Password& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  new_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_password()) {
    new_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_password_);
  }
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
}

void APP2S_Modify_Password::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

APP2S_Modify_Password::~APP2S_Modify_Password() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  SharedDtor();
}

void APP2S_Modify_Password::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Modify_Password::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Modify_Password::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Modify_Password& APP2S_Modify_Password::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Modify_Password* APP2S_Modify_Password::New(::google::protobuf::Arena* arena) const {
  APP2S_Modify_Password* n = new APP2S_Modify_Password;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Modify_Password::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_new_password()) {
      GOOGLE_DCHECK(!new_password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*new_password_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Modify_Password::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes new_password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  return false;
#undef DO_
}

void APP2S_Modify_Password::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // required bytes new_password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->new_password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
}

::google::protobuf::uint8* APP2S_Modify_Password::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes new_password = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->new_password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  return target;
}

size_t APP2S_Modify_Password::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_new_password()) {
    // required bytes new_password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->new_password());
  }

  return total_size;
}
size_t APP2S_Modify_Password::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required bytes new_password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->new_password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Modify_Password::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Modify_Password* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Modify_Password>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
    MergeFrom(*source);
  }
}

void APP2S_Modify_Password::MergeFrom(const APP2S_Modify_Password& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_new_password();
      new_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_password_);
    }
  }
}

void APP2S_Modify_Password::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Modify_Password::CopyFrom(const APP2S_Modify_Password& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Modify_Password)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Modify_Password::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void APP2S_Modify_Password::Swap(APP2S_Modify_Password* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Modify_Password::InternalSwap(APP2S_Modify_Password* other) {
  account_.Swap(&other->account_);
  new_password_.Swap(&other->new_password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Modify_Password::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Modify_Password

// required bytes account = 1;
bool APP2S_Modify_Password::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Modify_Password::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Modify_Password::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Modify_Password::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& APP2S_Modify_Password::account() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
  return account_.GetNoArena();
}
void APP2S_Modify_Password::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
}
#if LANG_CXX11
void APP2S_Modify_Password::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
}
#endif
void APP2S_Modify_Password::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
}
void APP2S_Modify_Password::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
}
::std::string* APP2S_Modify_Password::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Modify_Password::release_account() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Modify_Password::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Modify_Password.account)
}

// required bytes new_password = 2;
bool APP2S_Modify_Password::has_new_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Modify_Password::set_has_new_password() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Modify_Password::clear_has_new_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Modify_Password::clear_new_password() {
  new_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_password();
}
const ::std::string& APP2S_Modify_Password::new_password() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
  return new_password_.GetNoArena();
}
void APP2S_Modify_Password::set_new_password(const ::std::string& value) {
  set_has_new_password();
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
}
#if LANG_CXX11
void APP2S_Modify_Password::set_new_password(::std::string&& value) {
  set_has_new_password();
  new_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
}
#endif
void APP2S_Modify_Password::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_password();
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
}
void APP2S_Modify_Password::set_new_password(const void* value, size_t size) {
  set_has_new_password();
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
}
::std::string* APP2S_Modify_Password::mutable_new_password() {
  set_has_new_password();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
  return new_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Modify_Password::release_new_password() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
  clear_has_new_password();
  return new_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Modify_Password::set_allocated_new_password(::std::string* new_password) {
  if (new_password != NULL) {
    set_has_new_password();
  } else {
    clear_has_new_password();
  }
  new_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_password);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Modify_Password.new_password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Find_Slope::kSlopeIdFieldNumber;
const int APP2S_Find_Slope::kSlopeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Find_Slope::APP2S_Find_Slope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
}
APP2S_Find_Slope::APP2S_Find_Slope(const APP2S_Find_Slope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slope_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_slope_name()) {
    slope_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slope_name_);
  }
  slope_id_ = from.slope_id_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
}

void APP2S_Find_Slope::SharedCtor() {
  _cached_size_ = 0;
  slope_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slope_id_ = 0u;
}

APP2S_Find_Slope::~APP2S_Find_Slope() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  SharedDtor();
}

void APP2S_Find_Slope::SharedDtor() {
  slope_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Find_Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Find_Slope::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Find_Slope& APP2S_Find_Slope::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Find_Slope* APP2S_Find_Slope::New(::google::protobuf::Arena* arena) const {
  APP2S_Find_Slope* n = new APP2S_Find_Slope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Find_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  if (has_slope_name()) {
    GOOGLE_DCHECK(!slope_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*slope_name_.UnsafeRawStringPointer())->clear();
  }
  slope_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Find_Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slope_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes slope_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_slope_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  return false;
#undef DO_
}

void APP2S_Find_Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 slope_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slope_id(), output);
  }

  // required bytes slope_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->slope_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
}

::google::protobuf::uint8* APP2S_Find_Slope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 slope_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slope_id(), target);
  }

  // required bytes slope_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->slope_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  return target;
}

size_t APP2S_Find_Slope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  size_t total_size = 0;

  if (has_slope_name()) {
    // required bytes slope_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->slope_name());
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  return total_size;
}
size_t APP2S_Find_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes slope_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->slope_name());

    // required uint32 slope_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Find_Slope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Find_Slope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Find_Slope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
    MergeFrom(*source);
  }
}

void APP2S_Find_Slope::MergeFrom(const APP2S_Find_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_slope_name();
      slope_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slope_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      slope_id_ = from.slope_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Find_Slope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Find_Slope::CopyFrom(const APP2S_Find_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Find_Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void APP2S_Find_Slope::Swap(APP2S_Find_Slope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Find_Slope::InternalSwap(APP2S_Find_Slope* other) {
  slope_name_.Swap(&other->slope_name_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Find_Slope::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Find_Slope

// required uint32 slope_id = 1;
bool APP2S_Find_Slope::has_slope_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Find_Slope::set_has_slope_id() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Find_Slope::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Find_Slope::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 APP2S_Find_Slope::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_id)
  return slope_id_;
}
void APP2S_Find_Slope::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_id)
}

// required bytes slope_name = 2;
bool APP2S_Find_Slope::has_slope_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Find_Slope::set_has_slope_name() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Find_Slope::clear_has_slope_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Find_Slope::clear_slope_name() {
  slope_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slope_name();
}
const ::std::string& APP2S_Find_Slope::slope_name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
  return slope_name_.GetNoArena();
}
void APP2S_Find_Slope::set_slope_name(const ::std::string& value) {
  set_has_slope_name();
  slope_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
}
#if LANG_CXX11
void APP2S_Find_Slope::set_slope_name(::std::string&& value) {
  set_has_slope_name();
  slope_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
}
#endif
void APP2S_Find_Slope::set_slope_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slope_name();
  slope_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
}
void APP2S_Find_Slope::set_slope_name(const void* value, size_t size) {
  set_has_slope_name();
  slope_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
}
::std::string* APP2S_Find_Slope::mutable_slope_name() {
  set_has_slope_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
  return slope_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Find_Slope::release_slope_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
  clear_has_slope_name();
  return slope_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Find_Slope::set_allocated_slope_name(::std::string* slope_name) {
  if (slope_name != NULL) {
    set_has_slope_name();
  } else {
    clear_has_slope_name();
  }
  slope_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slope_name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Find_Slope.slope_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APP2S_Find_Sensor::kSlopeIdFieldNumber;
const int APP2S_Find_Sensor::kSlopeNameFieldNumber;
const int APP2S_Find_Sensor::kSensorIdFieldNumber;
const int APP2S_Find_Sensor::kSensorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APP2S_Find_Sensor::APP2S_Find_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
}
APP2S_Find_Sensor::APP2S_Find_Sensor(const APP2S_Find_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slope_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_slope_name()) {
    slope_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slope_name_);
  }
  ::memcpy(&slope_id_, &from.slope_id_,
    reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&slope_id_) + sizeof(sensor_type_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
}

void APP2S_Find_Sensor::SharedCtor() {
  _cached_size_ = 0;
  slope_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&slope_id_, 0, reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&slope_id_) + sizeof(sensor_type_));
}

APP2S_Find_Sensor::~APP2S_Find_Sensor() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  SharedDtor();
}

void APP2S_Find_Sensor::SharedDtor() {
  slope_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APP2S_Find_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APP2S_Find_Sensor::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const APP2S_Find_Sensor& APP2S_Find_Sensor::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

APP2S_Find_Sensor* APP2S_Find_Sensor::New(::google::protobuf::Arena* arena) const {
  APP2S_Find_Sensor* n = new APP2S_Find_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APP2S_Find_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  if (has_slope_name()) {
    GOOGLE_DCHECK(!slope_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*slope_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&slope_id_, 0, reinterpret_cast<char*>(&sensor_type_) -
      reinterpret_cast<char*>(&slope_id_) + sizeof(sensor_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool APP2S_Find_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slope_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes slope_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_slope_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sensor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sensor_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sensor_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  return false;
#undef DO_
}

void APP2S_Find_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 slope_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slope_id(), output);
  }

  // required bytes slope_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->slope_name(), output);
  }

  // required uint32 sensor_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // required uint32 sensor_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensor_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
}

::google::protobuf::uint8* APP2S_Find_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 slope_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slope_id(), target);
  }

  // required bytes slope_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->slope_name(), target);
  }

  // required uint32 sensor_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // required uint32 sensor_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensor_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  return target;
}

size_t APP2S_Find_Sensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  size_t total_size = 0;

  if (has_slope_name()) {
    // required bytes slope_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->slope_name());
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_sensor_id()) {
    // required uint32 sensor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  if (has_sensor_type()) {
    // required uint32 sensor_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_type());
  }

  return total_size;
}
size_t APP2S_Find_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes slope_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->slope_name());

    // required uint32 slope_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required uint32 sensor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());

    // required uint32 sensor_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APP2S_Find_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const APP2S_Find_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APP2S_Find_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
    MergeFrom(*source);
  }
}

void APP2S_Find_Sensor::MergeFrom(const APP2S_Find_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_slope_name();
      slope_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slope_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sensor_type_ = from.sensor_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APP2S_Find_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APP2S_Find_Sensor::CopyFrom(const APP2S_Find_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.APP2S_Find_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APP2S_Find_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void APP2S_Find_Sensor::Swap(APP2S_Find_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APP2S_Find_Sensor::InternalSwap(APP2S_Find_Sensor* other) {
  slope_name_.Swap(&other->slope_name_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(sensor_type_, other->sensor_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APP2S_Find_Sensor::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APP2S_Find_Sensor

// required uint32 slope_id = 1;
bool APP2S_Find_Sensor::has_slope_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void APP2S_Find_Sensor::set_has_slope_id() {
  _has_bits_[0] |= 0x00000002u;
}
void APP2S_Find_Sensor::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void APP2S_Find_Sensor::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 APP2S_Find_Sensor::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_id)
  return slope_id_;
}
void APP2S_Find_Sensor::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_id)
}

// required bytes slope_name = 2;
bool APP2S_Find_Sensor::has_slope_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void APP2S_Find_Sensor::set_has_slope_name() {
  _has_bits_[0] |= 0x00000001u;
}
void APP2S_Find_Sensor::clear_has_slope_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void APP2S_Find_Sensor::clear_slope_name() {
  slope_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slope_name();
}
const ::std::string& APP2S_Find_Sensor::slope_name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
  return slope_name_.GetNoArena();
}
void APP2S_Find_Sensor::set_slope_name(const ::std::string& value) {
  set_has_slope_name();
  slope_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
}
#if LANG_CXX11
void APP2S_Find_Sensor::set_slope_name(::std::string&& value) {
  set_has_slope_name();
  slope_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
}
#endif
void APP2S_Find_Sensor::set_slope_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slope_name();
  slope_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
}
void APP2S_Find_Sensor::set_slope_name(const void* value, size_t size) {
  set_has_slope_name();
  slope_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
}
::std::string* APP2S_Find_Sensor::mutable_slope_name() {
  set_has_slope_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
  return slope_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APP2S_Find_Sensor::release_slope_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
  clear_has_slope_name();
  return slope_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APP2S_Find_Sensor::set_allocated_slope_name(::std::string* slope_name) {
  if (slope_name != NULL) {
    set_has_slope_name();
  } else {
    clear_has_slope_name();
  }
  slope_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slope_name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.slope_name)
}

// required uint32 sensor_id = 3;
bool APP2S_Find_Sensor::has_sensor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void APP2S_Find_Sensor::set_has_sensor_id() {
  _has_bits_[0] |= 0x00000004u;
}
void APP2S_Find_Sensor::clear_has_sensor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void APP2S_Find_Sensor::clear_sensor_id() {
  sensor_id_ = 0u;
  clear_has_sensor_id();
}
::google::protobuf::uint32 APP2S_Find_Sensor::sensor_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.sensor_id)
  return sensor_id_;
}
void APP2S_Find_Sensor::set_sensor_id(::google::protobuf::uint32 value) {
  set_has_sensor_id();
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.sensor_id)
}

// required uint32 sensor_type = 4;
bool APP2S_Find_Sensor::has_sensor_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void APP2S_Find_Sensor::set_has_sensor_type() {
  _has_bits_[0] |= 0x00000008u;
}
void APP2S_Find_Sensor::clear_has_sensor_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void APP2S_Find_Sensor::clear_sensor_type() {
  sensor_type_ = 0u;
  clear_has_sensor_type();
}
::google::protobuf::uint32 APP2S_Find_Sensor::sensor_type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.sensor_type)
  return sensor_type_;
}
void APP2S_Find_Sensor::set_sensor_type(::google::protobuf::uint32 value) {
  set_has_sensor_type();
  sensor_type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.APP2S_Find_Sensor.sensor_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Login_Result_ServerData::kIdFieldNumber;
const int S2App_Login_Result_ServerData::kIpFieldNumber;
const int S2App_Login_Result_ServerData::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Login_Result_ServerData::S2App_Login_Result_ServerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
}
S2App_Login_Result_ServerData::S2App_Login_Result_ServerData(const S2App_Login_Result_ServerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
}

void S2App_Login_Result_ServerData::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_) + sizeof(port_));
}

S2App_Login_Result_ServerData::~S2App_Login_Result_ServerData() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  SharedDtor();
}

void S2App_Login_Result_ServerData::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2App_Login_Result_ServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Login_Result_ServerData::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Login_Result_ServerData& S2App_Login_Result_ServerData::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Login_Result_ServerData* S2App_Login_Result_ServerData::New(::google::protobuf::Arena* arena) const {
  S2App_Login_Result_ServerData* n = new S2App_Login_Result_ServerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Login_Result_ServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Login_Result_ServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  return false;
#undef DO_
}

void S2App_Login_Result_ServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
}

::google::protobuf::uint8* S2App_Login_Result_ServerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  return target;
}

size_t S2App_Login_Result_ServerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  size_t total_size = 0;

  if (has_ip()) {
    // required bytes ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_port()) {
    // required uint32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t S2App_Login_Result_ServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Login_Result_ServerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Login_Result_ServerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Login_Result_ServerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
    MergeFrom(*source);
  }
}

void S2App_Login_Result_ServerData::MergeFrom(const S2App_Login_Result_ServerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2App_Login_Result_ServerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Login_Result_ServerData::CopyFrom(const S2App_Login_Result_ServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Login_Result_ServerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void S2App_Login_Result_ServerData::Swap(S2App_Login_Result_ServerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Login_Result_ServerData::InternalSwap(S2App_Login_Result_ServerData* other) {
  ip_.Swap(&other->ip_);
  std::swap(id_, other->id_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Login_Result_ServerData::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Login_Result_ServerData

// required uint32 id = 1;
bool S2App_Login_Result_ServerData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2App_Login_Result_ServerData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void S2App_Login_Result_ServerData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2App_Login_Result_ServerData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2App_Login_Result_ServerData::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.id)
  return id_;
}
void S2App_Login_Result_ServerData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.id)
}

// required bytes ip = 2;
bool S2App_Login_Result_ServerData::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2App_Login_Result_ServerData::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void S2App_Login_Result_ServerData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2App_Login_Result_ServerData::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& S2App_Login_Result_ServerData::ip() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
  return ip_.GetNoArena();
}
void S2App_Login_Result_ServerData::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
}
#if LANG_CXX11
void S2App_Login_Result_ServerData::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
}
#endif
void S2App_Login_Result_ServerData::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
}
void S2App_Login_Result_ServerData::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
}
::std::string* S2App_Login_Result_ServerData::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2App_Login_Result_ServerData::release_ip() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2App_Login_Result_ServerData::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.ip)
}

// required uint32 port = 3;
bool S2App_Login_Result_ServerData::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2App_Login_Result_ServerData::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void S2App_Login_Result_ServerData::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2App_Login_Result_ServerData::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 S2App_Login_Result_ServerData::port() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.port)
  return port_;
}
void S2App_Login_Result_ServerData::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Login_Result::kResultFieldNumber;
const int S2App_Login_Result::kServerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Login_Result::S2App_Login_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Login_Result)
}
S2App_Login_Result::S2App_Login_Result(const S2App_Login_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      server_list_(from.server_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Login_Result)
}

void S2App_Login_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

S2App_Login_Result::~S2App_Login_Result() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Login_Result)
  SharedDtor();
}

void S2App_Login_Result::SharedDtor() {
}

void S2App_Login_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Login_Result::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Login_Result& S2App_Login_Result::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Login_Result* S2App_Login_Result::New(::google::protobuf::Arena* arena) const {
  S2App_Login_Result* n = new S2App_Login_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Login_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  server_list_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Login_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData server_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Login_Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Login_Result)
  return false;
#undef DO_
}

void S2App_Login_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData server_list = 2;
  for (unsigned int i = 0, n = this->server_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Login_Result)
}

::google::protobuf::uint8* S2App_Login_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData server_list = 2;
  for (unsigned int i = 0, n = this->server_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->server_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Login_Result)
  return target;
}

size_t S2App_Login_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  // repeated .APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData server_list = 2;
  {
    unsigned int count = this->server_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Login_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Login_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Login_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Login_Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Login_Result)
    MergeFrom(*source);
  }
}

void S2App_Login_Result::MergeFrom(const S2App_Login_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void S2App_Login_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Login_Result::CopyFrom(const S2App_Login_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Login_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Login_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->server_list())) return false;
  return true;
}

void S2App_Login_Result::Swap(S2App_Login_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Login_Result::InternalSwap(S2App_Login_Result* other) {
  server_list_.InternalSwap(&other->server_list_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Login_Result::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Login_Result

// required uint32 result = 1;
bool S2App_Login_Result::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2App_Login_Result::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void S2App_Login_Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2App_Login_Result::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 S2App_Login_Result::result() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Login_Result.result)
  return result_;
}
void S2App_Login_Result::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Login_Result.result)
}

// repeated .APP_SERVER_NET_Protocol.S2App_Login_Result.ServerData server_list = 2;
int S2App_Login_Result::server_list_size() const {
  return server_list_.size();
}
void S2App_Login_Result::clear_server_list() {
  server_list_.Clear();
}
const ::APP_SERVER_NET_Protocol::S2App_Login_Result_ServerData& S2App_Login_Result::server_list(int index) const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Login_Result.server_list)
  return server_list_.Get(index);
}
::APP_SERVER_NET_Protocol::S2App_Login_Result_ServerData* S2App_Login_Result::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Login_Result.server_list)
  return server_list_.Mutable(index);
}
::APP_SERVER_NET_Protocol::S2App_Login_Result_ServerData* S2App_Login_Result::add_server_list() {
  // @@protoc_insertion_point(field_add:APP_SERVER_NET_Protocol.S2App_Login_Result.server_list)
  return server_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Login_Result_ServerData >*
S2App_Login_Result::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:APP_SERVER_NET_Protocol.S2App_Login_Result.server_list)
  return &server_list_;
}
const ::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Login_Result_ServerData >&
S2App_Login_Result::server_list() const {
  // @@protoc_insertion_point(field_list:APP_SERVER_NET_Protocol.S2App_Login_Result.server_list)
  return server_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Slope_List_SlopeData::kIdFieldNumber;
const int S2App_Slope_List_SlopeData::kTypeFieldNumber;
const int S2App_Slope_List_SlopeData::kNameFieldNumber;
const int S2App_Slope_List_SlopeData::kStateFieldNumber;
const int S2App_Slope_List_SlopeData::kLongitudeFieldNumber;
const int S2App_Slope_List_SlopeData::kLatitudeFieldNumber;
const int S2App_Slope_List_SlopeData::kUrlFieldNumber;
const int S2App_Slope_List_SlopeData::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Slope_List_SlopeData::S2App_Slope_List_SlopeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
}
S2App_Slope_List_SlopeData::S2App_Slope_List_SlopeData(const S2App_Slope_List_SlopeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
}

void S2App_Slope_List_SlopeData::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

S2App_Slope_List_SlopeData::~S2App_Slope_List_SlopeData() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  SharedDtor();
}

void S2App_Slope_List_SlopeData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2App_Slope_List_SlopeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Slope_List_SlopeData::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Slope_List_SlopeData& S2App_Slope_List_SlopeData::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Slope_List_SlopeData* S2App_Slope_List_SlopeData::New(::google::protobuf::Arena* arena) const {
  S2App_Slope_List_SlopeData* n = new S2App_Slope_List_SlopeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Slope_List_SlopeData::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Slope_List_SlopeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  return false;
#undef DO_
}

void S2App_Slope_List_SlopeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required uint32 state = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // optional bytes url = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->url(), output);
  }

  // optional uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
}

::google::protobuf::uint8* S2App_Slope_List_SlopeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint32 state = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // optional bytes url = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->url(), target);
  }

  // optional uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  return target;
}

size_t S2App_Slope_List_SlopeData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 6;
    total_size += 1 + 8;
  }

  if (has_state()) {
    // required uint32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  return total_size;
}
size_t S2App_Slope_List_SlopeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007d) ^ 0x0000007d) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double latitude = 6;
    total_size += 1 + 8;

    // required uint32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes url = 7;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  // optional uint32 scene_id = 8;
  if (has_scene_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Slope_List_SlopeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Slope_List_SlopeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Slope_List_SlopeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
    MergeFrom(*source);
  }
}

void S2App_Slope_List_SlopeData::MergeFrom(const S2App_Slope_List_SlopeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2App_Slope_List_SlopeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Slope_List_SlopeData::CopyFrom(const S2App_Slope_List_SlopeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Slope_List_SlopeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;
  return true;
}

void S2App_Slope_List_SlopeData::Swap(S2App_Slope_List_SlopeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Slope_List_SlopeData::InternalSwap(S2App_Slope_List_SlopeData* other) {
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(state_, other->state_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Slope_List_SlopeData::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Slope_List_SlopeData

// required uint32 id = 1;
bool S2App_Slope_List_SlopeData::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void S2App_Slope_List_SlopeData::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2App_Slope_List_SlopeData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2App_Slope_List_SlopeData::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.id)
  return id_;
}
void S2App_Slope_List_SlopeData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.id)
}

// required uint32 type = 2;
bool S2App_Slope_List_SlopeData::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void S2App_Slope_List_SlopeData::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2App_Slope_List_SlopeData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 S2App_Slope_List_SlopeData::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.type)
  return type_;
}
void S2App_Slope_List_SlopeData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.type)
}

// required bytes name = 3;
bool S2App_Slope_List_SlopeData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void S2App_Slope_List_SlopeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2App_Slope_List_SlopeData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& S2App_Slope_List_SlopeData::name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
  return name_.GetNoArena();
}
void S2App_Slope_List_SlopeData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
}
#if LANG_CXX11
void S2App_Slope_List_SlopeData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
}
#endif
void S2App_Slope_List_SlopeData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
}
void S2App_Slope_List_SlopeData::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
}
::std::string* S2App_Slope_List_SlopeData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2App_Slope_List_SlopeData::release_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2App_Slope_List_SlopeData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.name)
}

// required uint32 state = 4;
bool S2App_Slope_List_SlopeData::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
void S2App_Slope_List_SlopeData::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2App_Slope_List_SlopeData::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 S2App_Slope_List_SlopeData::state() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.state)
  return state_;
}
void S2App_Slope_List_SlopeData::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.state)
}

// required double longitude = 5;
bool S2App_Slope_List_SlopeData::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void S2App_Slope_List_SlopeData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2App_Slope_List_SlopeData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2App_Slope_List_SlopeData::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.longitude)
  return longitude_;
}
void S2App_Slope_List_SlopeData::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.longitude)
}

// required double latitude = 6;
bool S2App_Slope_List_SlopeData::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void S2App_Slope_List_SlopeData::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2App_Slope_List_SlopeData::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2App_Slope_List_SlopeData::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.latitude)
  return latitude_;
}
void S2App_Slope_List_SlopeData::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.latitude)
}

// optional bytes url = 7;
bool S2App_Slope_List_SlopeData::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void S2App_Slope_List_SlopeData::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2App_Slope_List_SlopeData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& S2App_Slope_List_SlopeData::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
  return url_.GetNoArena();
}
void S2App_Slope_List_SlopeData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
}
#if LANG_CXX11
void S2App_Slope_List_SlopeData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
}
#endif
void S2App_Slope_List_SlopeData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
}
void S2App_Slope_List_SlopeData::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
}
::std::string* S2App_Slope_List_SlopeData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2App_Slope_List_SlopeData::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2App_Slope_List_SlopeData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.url)
}

// optional uint32 scene_id = 8;
bool S2App_Slope_List_SlopeData::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2App_Slope_List_SlopeData::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
void S2App_Slope_List_SlopeData::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2App_Slope_List_SlopeData::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2App_Slope_List_SlopeData::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.scene_id)
  return scene_id_;
}
void S2App_Slope_List_SlopeData::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Slope_List::kSlopeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Slope_List::S2App_Slope_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Slope_List)
}
S2App_Slope_List::S2App_Slope_List(const S2App_Slope_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slope_list_(from.slope_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Slope_List)
}

void S2App_Slope_List::SharedCtor() {
  _cached_size_ = 0;
}

S2App_Slope_List::~S2App_Slope_List() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Slope_List)
  SharedDtor();
}

void S2App_Slope_List::SharedDtor() {
}

void S2App_Slope_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Slope_List::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Slope_List& S2App_Slope_List::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Slope_List* S2App_Slope_List::New(::google::protobuf::Arena* arena) const {
  S2App_Slope_List* n = new S2App_Slope_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Slope_List::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  slope_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Slope_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData slope_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slope_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Slope_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Slope_List)
  return false;
#undef DO_
}

void S2App_Slope_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData slope_list = 1;
  for (unsigned int i = 0, n = this->slope_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slope_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Slope_List)
}

::google::protobuf::uint8* S2App_Slope_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData slope_list = 1;
  for (unsigned int i = 0, n = this->slope_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->slope_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Slope_List)
  return target;
}

size_t S2App_Slope_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData slope_list = 1;
  {
    unsigned int count = this->slope_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slope_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Slope_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Slope_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Slope_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Slope_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Slope_List)
    MergeFrom(*source);
  }
}

void S2App_Slope_List::MergeFrom(const S2App_Slope_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slope_list_.MergeFrom(from.slope_list_);
}

void S2App_Slope_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Slope_List::CopyFrom(const S2App_Slope_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Slope_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Slope_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->slope_list())) return false;
  return true;
}

void S2App_Slope_List::Swap(S2App_Slope_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Slope_List::InternalSwap(S2App_Slope_List* other) {
  slope_list_.InternalSwap(&other->slope_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Slope_List::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Slope_List

// repeated .APP_SERVER_NET_Protocol.S2App_Slope_List.SlopeData slope_list = 1;
int S2App_Slope_List::slope_list_size() const {
  return slope_list_.size();
}
void S2App_Slope_List::clear_slope_list() {
  slope_list_.Clear();
}
const ::APP_SERVER_NET_Protocol::S2App_Slope_List_SlopeData& S2App_Slope_List::slope_list(int index) const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Slope_List.slope_list)
  return slope_list_.Get(index);
}
::APP_SERVER_NET_Protocol::S2App_Slope_List_SlopeData* S2App_Slope_List::mutable_slope_list(int index) {
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Slope_List.slope_list)
  return slope_list_.Mutable(index);
}
::APP_SERVER_NET_Protocol::S2App_Slope_List_SlopeData* S2App_Slope_List::add_slope_list() {
  // @@protoc_insertion_point(field_add:APP_SERVER_NET_Protocol.S2App_Slope_List.slope_list)
  return slope_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Slope_List_SlopeData >*
S2App_Slope_List::mutable_slope_list() {
  // @@protoc_insertion_point(field_mutable_list:APP_SERVER_NET_Protocol.S2App_Slope_List.slope_list)
  return &slope_list_;
}
const ::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Slope_List_SlopeData >&
S2App_Slope_List::slope_list() const {
  // @@protoc_insertion_point(field_list:APP_SERVER_NET_Protocol.S2App_Slope_List.slope_list)
  return slope_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Sensor_List_SensorData::kIdFieldNumber;
const int S2App_Sensor_List_SensorData::kTypeFieldNumber;
const int S2App_Sensor_List_SensorData::kStateFieldNumber;
const int S2App_Sensor_List_SensorData::kSlopeIdFieldNumber;
const int S2App_Sensor_List_SensorData::kLongitudeFieldNumber;
const int S2App_Sensor_List_SensorData::kLatitudeFieldNumber;
const int S2App_Sensor_List_SensorData::kCurValue1FieldNumber;
const int S2App_Sensor_List_SensorData::kCurValue2FieldNumber;
const int S2App_Sensor_List_SensorData::kCurValue3FieldNumber;
const int S2App_Sensor_List_SensorData::kAvgValue1FieldNumber;
const int S2App_Sensor_List_SensorData::kAvgValue2FieldNumber;
const int S2App_Sensor_List_SensorData::kAvgValue3FieldNumber;
const int S2App_Sensor_List_SensorData::kOffsetValue1FieldNumber;
const int S2App_Sensor_List_SensorData::kOffsetValue2FieldNumber;
const int S2App_Sensor_List_SensorData::kOffsetValue3FieldNumber;
const int S2App_Sensor_List_SensorData::kUrlFieldNumber;
const int S2App_Sensor_List_SensorData::kDescriptionFieldNumber;
const int S2App_Sensor_List_SensorData::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Sensor_List_SensorData::S2App_Sensor_List_SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
}
S2App_Sensor_List_SensorData::S2App_Sensor_List_SensorData(const S2App_Sensor_List_SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
}

void S2App_Sensor_List_SensorData::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

S2App_Sensor_List_SensorData::~S2App_Sensor_List_SensorData() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  SharedDtor();
}

void S2App_Sensor_List_SensorData::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2App_Sensor_List_SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Sensor_List_SensorData::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Sensor_List_SensorData& S2App_Sensor_List_SensorData::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Sensor_List_SensorData* S2App_Sensor_List_SensorData::New(::google::protobuf::Arena* arena) const {
  S2App_Sensor_List_SensorData* n = new S2App_Sensor_List_SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Sensor_List_SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&id_) + sizeof(latitude_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&cur_value1_, 0, reinterpret_cast<char*>(&offset_value2_) -
      reinterpret_cast<char*>(&cur_value1_) + sizeof(offset_value2_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&offset_value3_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&offset_value3_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Sensor_List_SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slope_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cur_value1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_cur_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cur_value2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_cur_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cur_value3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_cur_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_value1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_avg_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_value2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_avg_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_value3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_avg_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double offset_value1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_offset_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double offset_value2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_offset_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double offset_value3 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_offset_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes description = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  return false;
#undef DO_
}

void S2App_Sensor_List_SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 state = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required uint32 slope_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slope_id(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // required double cur_value1 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cur_value1(), output);
  }

  // required double cur_value2 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cur_value2(), output);
  }

  // required double cur_value3 = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cur_value3(), output);
  }

  // required double avg_value1 = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->avg_value1(), output);
  }

  // required double avg_value2 = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->avg_value2(), output);
  }

  // required double avg_value3 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->avg_value3(), output);
  }

  // required double offset_value1 = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->offset_value1(), output);
  }

  // required double offset_value2 = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->offset_value2(), output);
  }

  // required double offset_value3 = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->offset_value3(), output);
  }

  // required bytes url = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->url(), output);
  }

  // required bytes description = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->description(), output);
  }

  // required uint32 scene_id = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
}

::google::protobuf::uint8* S2App_Sensor_List_SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 state = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // required uint32 slope_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slope_id(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // required double cur_value1 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cur_value1(), target);
  }

  // required double cur_value2 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cur_value2(), target);
  }

  // required double cur_value3 = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cur_value3(), target);
  }

  // required double avg_value1 = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->avg_value1(), target);
  }

  // required double avg_value2 = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->avg_value2(), target);
  }

  // required double avg_value3 = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->avg_value3(), target);
  }

  // required double offset_value1 = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->offset_value1(), target);
  }

  // required double offset_value2 = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->offset_value2(), target);
  }

  // required double offset_value3 = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->offset_value3(), target);
  }

  // required bytes url = 16;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->url(), target);
  }

  // required bytes description = 17;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->description(), target);
  }

  // required uint32 scene_id = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  return target;
}

size_t S2App_Sensor_List_SensorData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  size_t total_size = 0;

  if (has_url()) {
    // required bytes url = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_description()) {
    // required bytes description = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_state()) {
    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 6;
    total_size += 1 + 8;
  }

  if (has_cur_value1()) {
    // required double cur_value1 = 7;
    total_size += 1 + 8;
  }

  if (has_cur_value2()) {
    // required double cur_value2 = 8;
    total_size += 1 + 8;
  }

  if (has_cur_value3()) {
    // required double cur_value3 = 9;
    total_size += 1 + 8;
  }

  if (has_avg_value1()) {
    // required double avg_value1 = 10;
    total_size += 1 + 8;
  }

  if (has_avg_value2()) {
    // required double avg_value2 = 11;
    total_size += 1 + 8;
  }

  if (has_avg_value3()) {
    // required double avg_value3 = 12;
    total_size += 1 + 8;
  }

  if (has_offset_value1()) {
    // required double offset_value1 = 13;
    total_size += 1 + 8;
  }

  if (has_offset_value2()) {
    // required double offset_value2 = 14;
    total_size += 1 + 8;
  }

  if (has_offset_value3()) {
    // required double offset_value3 = 15;
    total_size += 1 + 8;
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t S2App_Sensor_List_SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required bytes url = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required bytes description = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

    // required uint32 slope_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double latitude = 6;
    total_size += 1 + 8;

    // required double cur_value1 = 7;
    total_size += 1 + 8;

    // required double cur_value2 = 8;
    total_size += 1 + 8;

    // required double cur_value3 = 9;
    total_size += 1 + 8;

    // required double avg_value1 = 10;
    total_size += 1 + 8;

    // required double avg_value2 = 11;
    total_size += 1 + 8;

    // required double avg_value3 = 12;
    total_size += 1 + 8;

    // required double offset_value1 = 13;
    total_size += 1 + 8;

    // required double offset_value2 = 14;
    total_size += 1 + 8;

    // required double offset_value3 = 15;
    total_size += 1 + 8;

    // required uint32 scene_id = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Sensor_List_SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Sensor_List_SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Sensor_List_SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
    MergeFrom(*source);
  }
}

void S2App_Sensor_List_SensorData::MergeFrom(const S2App_Sensor_List_SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      cur_value1_ = from.cur_value1_;
    }
    if (cached_has_bits & 0x00000200u) {
      cur_value2_ = from.cur_value2_;
    }
    if (cached_has_bits & 0x00000400u) {
      cur_value3_ = from.cur_value3_;
    }
    if (cached_has_bits & 0x00000800u) {
      avg_value1_ = from.avg_value1_;
    }
    if (cached_has_bits & 0x00001000u) {
      avg_value2_ = from.avg_value2_;
    }
    if (cached_has_bits & 0x00002000u) {
      avg_value3_ = from.avg_value3_;
    }
    if (cached_has_bits & 0x00004000u) {
      offset_value1_ = from.offset_value1_;
    }
    if (cached_has_bits & 0x00008000u) {
      offset_value2_ = from.offset_value2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      offset_value3_ = from.offset_value3_;
    }
    if (cached_has_bits & 0x00020000u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2App_Sensor_List_SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Sensor_List_SensorData::CopyFrom(const S2App_Sensor_List_SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Sensor_List_SensorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  return true;
}

void S2App_Sensor_List_SensorData::Swap(S2App_Sensor_List_SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Sensor_List_SensorData::InternalSwap(S2App_Sensor_List_SensorData* other) {
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(state_, other->state_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(cur_value1_, other->cur_value1_);
  std::swap(cur_value2_, other->cur_value2_);
  std::swap(cur_value3_, other->cur_value3_);
  std::swap(avg_value1_, other->avg_value1_);
  std::swap(avg_value2_, other->avg_value2_);
  std::swap(avg_value3_, other->avg_value3_);
  std::swap(offset_value1_, other->offset_value1_);
  std::swap(offset_value2_, other->offset_value2_);
  std::swap(offset_value3_, other->offset_value3_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Sensor_List_SensorData::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Sensor_List_SensorData

// required uint32 id = 1;
bool S2App_Sensor_List_SensorData::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void S2App_Sensor_List_SensorData::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2App_Sensor_List_SensorData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2App_Sensor_List_SensorData::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.id)
  return id_;
}
void S2App_Sensor_List_SensorData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.id)
}

// required uint32 type = 2;
bool S2App_Sensor_List_SensorData::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void S2App_Sensor_List_SensorData::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2App_Sensor_List_SensorData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 S2App_Sensor_List_SensorData::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.type)
  return type_;
}
void S2App_Sensor_List_SensorData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.type)
}

// required uint32 state = 3;
bool S2App_Sensor_List_SensorData::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void S2App_Sensor_List_SensorData::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2App_Sensor_List_SensorData::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 S2App_Sensor_List_SensorData::state() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.state)
  return state_;
}
void S2App_Sensor_List_SensorData::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.state)
}

// required uint32 slope_id = 4;
bool S2App_Sensor_List_SensorData::has_slope_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_slope_id() {
  _has_bits_[0] |= 0x00000020u;
}
void S2App_Sensor_List_SensorData::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2App_Sensor_List_SensorData::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 S2App_Sensor_List_SensorData::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.slope_id)
  return slope_id_;
}
void S2App_Sensor_List_SensorData::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.slope_id)
}

// required double longitude = 5;
bool S2App_Sensor_List_SensorData::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
void S2App_Sensor_List_SensorData::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2App_Sensor_List_SensorData::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2App_Sensor_List_SensorData::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.longitude)
  return longitude_;
}
void S2App_Sensor_List_SensorData::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.longitude)
}

// required double latitude = 6;
bool S2App_Sensor_List_SensorData::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
void S2App_Sensor_List_SensorData::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2App_Sensor_List_SensorData::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2App_Sensor_List_SensorData::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.latitude)
  return latitude_;
}
void S2App_Sensor_List_SensorData::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.latitude)
}

// required double cur_value1 = 7;
bool S2App_Sensor_List_SensorData::has_cur_value1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_cur_value1() {
  _has_bits_[0] |= 0x00000100u;
}
void S2App_Sensor_List_SensorData::clear_has_cur_value1() {
  _has_bits_[0] &= ~0x00000100u;
}
void S2App_Sensor_List_SensorData::clear_cur_value1() {
  cur_value1_ = 0;
  clear_has_cur_value1();
}
double S2App_Sensor_List_SensorData::cur_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.cur_value1)
  return cur_value1_;
}
void S2App_Sensor_List_SensorData::set_cur_value1(double value) {
  set_has_cur_value1();
  cur_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.cur_value1)
}

// required double cur_value2 = 8;
bool S2App_Sensor_List_SensorData::has_cur_value2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_cur_value2() {
  _has_bits_[0] |= 0x00000200u;
}
void S2App_Sensor_List_SensorData::clear_has_cur_value2() {
  _has_bits_[0] &= ~0x00000200u;
}
void S2App_Sensor_List_SensorData::clear_cur_value2() {
  cur_value2_ = 0;
  clear_has_cur_value2();
}
double S2App_Sensor_List_SensorData::cur_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.cur_value2)
  return cur_value2_;
}
void S2App_Sensor_List_SensorData::set_cur_value2(double value) {
  set_has_cur_value2();
  cur_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.cur_value2)
}

// required double cur_value3 = 9;
bool S2App_Sensor_List_SensorData::has_cur_value3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_cur_value3() {
  _has_bits_[0] |= 0x00000400u;
}
void S2App_Sensor_List_SensorData::clear_has_cur_value3() {
  _has_bits_[0] &= ~0x00000400u;
}
void S2App_Sensor_List_SensorData::clear_cur_value3() {
  cur_value3_ = 0;
  clear_has_cur_value3();
}
double S2App_Sensor_List_SensorData::cur_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.cur_value3)
  return cur_value3_;
}
void S2App_Sensor_List_SensorData::set_cur_value3(double value) {
  set_has_cur_value3();
  cur_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.cur_value3)
}

// required double avg_value1 = 10;
bool S2App_Sensor_List_SensorData::has_avg_value1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_avg_value1() {
  _has_bits_[0] |= 0x00000800u;
}
void S2App_Sensor_List_SensorData::clear_has_avg_value1() {
  _has_bits_[0] &= ~0x00000800u;
}
void S2App_Sensor_List_SensorData::clear_avg_value1() {
  avg_value1_ = 0;
  clear_has_avg_value1();
}
double S2App_Sensor_List_SensorData::avg_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.avg_value1)
  return avg_value1_;
}
void S2App_Sensor_List_SensorData::set_avg_value1(double value) {
  set_has_avg_value1();
  avg_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.avg_value1)
}

// required double avg_value2 = 11;
bool S2App_Sensor_List_SensorData::has_avg_value2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_avg_value2() {
  _has_bits_[0] |= 0x00001000u;
}
void S2App_Sensor_List_SensorData::clear_has_avg_value2() {
  _has_bits_[0] &= ~0x00001000u;
}
void S2App_Sensor_List_SensorData::clear_avg_value2() {
  avg_value2_ = 0;
  clear_has_avg_value2();
}
double S2App_Sensor_List_SensorData::avg_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.avg_value2)
  return avg_value2_;
}
void S2App_Sensor_List_SensorData::set_avg_value2(double value) {
  set_has_avg_value2();
  avg_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.avg_value2)
}

// required double avg_value3 = 12;
bool S2App_Sensor_List_SensorData::has_avg_value3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_avg_value3() {
  _has_bits_[0] |= 0x00002000u;
}
void S2App_Sensor_List_SensorData::clear_has_avg_value3() {
  _has_bits_[0] &= ~0x00002000u;
}
void S2App_Sensor_List_SensorData::clear_avg_value3() {
  avg_value3_ = 0;
  clear_has_avg_value3();
}
double S2App_Sensor_List_SensorData::avg_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.avg_value3)
  return avg_value3_;
}
void S2App_Sensor_List_SensorData::set_avg_value3(double value) {
  set_has_avg_value3();
  avg_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.avg_value3)
}

// required double offset_value1 = 13;
bool S2App_Sensor_List_SensorData::has_offset_value1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_offset_value1() {
  _has_bits_[0] |= 0x00004000u;
}
void S2App_Sensor_List_SensorData::clear_has_offset_value1() {
  _has_bits_[0] &= ~0x00004000u;
}
void S2App_Sensor_List_SensorData::clear_offset_value1() {
  offset_value1_ = 0;
  clear_has_offset_value1();
}
double S2App_Sensor_List_SensorData::offset_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.offset_value1)
  return offset_value1_;
}
void S2App_Sensor_List_SensorData::set_offset_value1(double value) {
  set_has_offset_value1();
  offset_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.offset_value1)
}

// required double offset_value2 = 14;
bool S2App_Sensor_List_SensorData::has_offset_value2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_offset_value2() {
  _has_bits_[0] |= 0x00008000u;
}
void S2App_Sensor_List_SensorData::clear_has_offset_value2() {
  _has_bits_[0] &= ~0x00008000u;
}
void S2App_Sensor_List_SensorData::clear_offset_value2() {
  offset_value2_ = 0;
  clear_has_offset_value2();
}
double S2App_Sensor_List_SensorData::offset_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.offset_value2)
  return offset_value2_;
}
void S2App_Sensor_List_SensorData::set_offset_value2(double value) {
  set_has_offset_value2();
  offset_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.offset_value2)
}

// required double offset_value3 = 15;
bool S2App_Sensor_List_SensorData::has_offset_value3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_offset_value3() {
  _has_bits_[0] |= 0x00010000u;
}
void S2App_Sensor_List_SensorData::clear_has_offset_value3() {
  _has_bits_[0] &= ~0x00010000u;
}
void S2App_Sensor_List_SensorData::clear_offset_value3() {
  offset_value3_ = 0;
  clear_has_offset_value3();
}
double S2App_Sensor_List_SensorData::offset_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.offset_value3)
  return offset_value3_;
}
void S2App_Sensor_List_SensorData::set_offset_value3(double value) {
  set_has_offset_value3();
  offset_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.offset_value3)
}

// required bytes url = 16;
bool S2App_Sensor_List_SensorData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void S2App_Sensor_List_SensorData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2App_Sensor_List_SensorData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& S2App_Sensor_List_SensorData::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
  return url_.GetNoArena();
}
void S2App_Sensor_List_SensorData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
}
#if LANG_CXX11
void S2App_Sensor_List_SensorData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
}
#endif
void S2App_Sensor_List_SensorData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
}
void S2App_Sensor_List_SensorData::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
}
::std::string* S2App_Sensor_List_SensorData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2App_Sensor_List_SensorData::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2App_Sensor_List_SensorData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.url)
}

// required bytes description = 17;
bool S2App_Sensor_List_SensorData::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void S2App_Sensor_List_SensorData::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2App_Sensor_List_SensorData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& S2App_Sensor_List_SensorData::description() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
  return description_.GetNoArena();
}
void S2App_Sensor_List_SensorData::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
}
#if LANG_CXX11
void S2App_Sensor_List_SensorData::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
}
#endif
void S2App_Sensor_List_SensorData::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
}
void S2App_Sensor_List_SensorData::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
}
::std::string* S2App_Sensor_List_SensorData::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2App_Sensor_List_SensorData::release_description() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2App_Sensor_List_SensorData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.description)
}

// required uint32 scene_id = 18;
bool S2App_Sensor_List_SensorData::has_scene_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void S2App_Sensor_List_SensorData::set_has_scene_id() {
  _has_bits_[0] |= 0x00020000u;
}
void S2App_Sensor_List_SensorData::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void S2App_Sensor_List_SensorData::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2App_Sensor_List_SensorData::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.scene_id)
  return scene_id_;
}
void S2App_Sensor_List_SensorData::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Sensor_List::kSensorListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Sensor_List::S2App_Sensor_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Sensor_List)
}
S2App_Sensor_List::S2App_Sensor_List(const S2App_Sensor_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sensor_list_(from.sensor_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Sensor_List)
}

void S2App_Sensor_List::SharedCtor() {
  _cached_size_ = 0;
}

S2App_Sensor_List::~S2App_Sensor_List() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  SharedDtor();
}

void S2App_Sensor_List::SharedDtor() {
}

void S2App_Sensor_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Sensor_List::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Sensor_List& S2App_Sensor_List::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Sensor_List* S2App_Sensor_List::New(::google::protobuf::Arena* arena) const {
  S2App_Sensor_List* n = new S2App_Sensor_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Sensor_List::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  sensor_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Sensor_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData sensor_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  return false;
#undef DO_
}

void S2App_Sensor_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData sensor_list = 1;
  for (unsigned int i = 0, n = this->sensor_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensor_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Sensor_List)
}

::google::protobuf::uint8* S2App_Sensor_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData sensor_list = 1;
  for (unsigned int i = 0, n = this->sensor_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sensor_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  return target;
}

size_t S2App_Sensor_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData sensor_list = 1;
  {
    unsigned int count = this->sensor_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Sensor_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Sensor_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Sensor_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Sensor_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Sensor_List)
    MergeFrom(*source);
  }
}

void S2App_Sensor_List::MergeFrom(const S2App_Sensor_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_list_.MergeFrom(from.sensor_list_);
}

void S2App_Sensor_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Sensor_List::CopyFrom(const S2App_Sensor_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Sensor_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sensor_list())) return false;
  return true;
}

void S2App_Sensor_List::Swap(S2App_Sensor_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Sensor_List::InternalSwap(S2App_Sensor_List* other) {
  sensor_list_.InternalSwap(&other->sensor_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Sensor_List::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Sensor_List

// repeated .APP_SERVER_NET_Protocol.S2App_Sensor_List.SensorData sensor_list = 1;
int S2App_Sensor_List::sensor_list_size() const {
  return sensor_list_.size();
}
void S2App_Sensor_List::clear_sensor_list() {
  sensor_list_.Clear();
}
const ::APP_SERVER_NET_Protocol::S2App_Sensor_List_SensorData& S2App_Sensor_List::sensor_list(int index) const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_List.sensor_list)
  return sensor_list_.Get(index);
}
::APP_SERVER_NET_Protocol::S2App_Sensor_List_SensorData* S2App_Sensor_List::mutable_sensor_list(int index) {
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Sensor_List.sensor_list)
  return sensor_list_.Mutable(index);
}
::APP_SERVER_NET_Protocol::S2App_Sensor_List_SensorData* S2App_Sensor_List::add_sensor_list() {
  // @@protoc_insertion_point(field_add:APP_SERVER_NET_Protocol.S2App_Sensor_List.sensor_list)
  return sensor_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Sensor_List_SensorData >*
S2App_Sensor_List::mutable_sensor_list() {
  // @@protoc_insertion_point(field_mutable_list:APP_SERVER_NET_Protocol.S2App_Sensor_List.sensor_list)
  return &sensor_list_;
}
const ::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Sensor_List_SensorData >&
S2App_Sensor_List::sensor_list() const {
  // @@protoc_insertion_point(field_list:APP_SERVER_NET_Protocol.S2App_Sensor_List.sensor_list)
  return sensor_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Sensor_History_SensorData::kMinValue1FieldNumber;
const int S2App_Sensor_History_SensorData::kMinValue2FieldNumber;
const int S2App_Sensor_History_SensorData::kMinValue3FieldNumber;
const int S2App_Sensor_History_SensorData::kMaxValue1FieldNumber;
const int S2App_Sensor_History_SensorData::kMaxValue2FieldNumber;
const int S2App_Sensor_History_SensorData::kMaxValue3FieldNumber;
const int S2App_Sensor_History_SensorData::kMinOffsetValue1FieldNumber;
const int S2App_Sensor_History_SensorData::kMinOffsetValue2FieldNumber;
const int S2App_Sensor_History_SensorData::kMinOffsetValue3FieldNumber;
const int S2App_Sensor_History_SensorData::kMaxOffsetValue1FieldNumber;
const int S2App_Sensor_History_SensorData::kMaxOffsetValue2FieldNumber;
const int S2App_Sensor_History_SensorData::kMaxOffsetValue3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Sensor_History_SensorData::S2App_Sensor_History_SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
}
S2App_Sensor_History_SensorData::S2App_Sensor_History_SensorData(const S2App_Sensor_History_SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_value1_, &from.min_value1_,
    reinterpret_cast<char*>(&max_offset_value3_) -
    reinterpret_cast<char*>(&min_value1_) + sizeof(max_offset_value3_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
}

void S2App_Sensor_History_SensorData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_value1_, 0, reinterpret_cast<char*>(&max_offset_value3_) -
    reinterpret_cast<char*>(&min_value1_) + sizeof(max_offset_value3_));
}

S2App_Sensor_History_SensorData::~S2App_Sensor_History_SensorData() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  SharedDtor();
}

void S2App_Sensor_History_SensorData::SharedDtor() {
}

void S2App_Sensor_History_SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Sensor_History_SensorData::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Sensor_History_SensorData& S2App_Sensor_History_SensorData::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Sensor_History_SensorData* S2App_Sensor_History_SensorData::New(::google::protobuf::Arena* arena) const {
  S2App_Sensor_History_SensorData* n = new S2App_Sensor_History_SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Sensor_History_SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&min_value1_, 0, reinterpret_cast<char*>(&min_offset_value2_) -
      reinterpret_cast<char*>(&min_value1_) + sizeof(min_offset_value2_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&min_offset_value3_, 0, reinterpret_cast<char*>(&max_offset_value3_) -
      reinterpret_cast<char*>(&min_offset_value3_) + sizeof(max_offset_value3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Sensor_History_SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double min_value1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_min_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double min_value2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_min_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double min_value3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_min_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_value1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_max_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_value2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_max_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_value3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_max_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double min_offset_value1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_min_offset_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_offset_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double min_offset_value2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_min_offset_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_offset_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double min_offset_value3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_min_offset_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_offset_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_offset_value1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_max_offset_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_offset_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_offset_value2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_max_offset_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_offset_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_offset_value3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_max_offset_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_offset_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  return false;
#undef DO_
}

void S2App_Sensor_History_SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double min_value1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_value1(), output);
  }

  // required double min_value2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_value2(), output);
  }

  // required double min_value3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_value3(), output);
  }

  // required double max_value1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_value1(), output);
  }

  // required double max_value2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_value2(), output);
  }

  // required double max_value3 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_value3(), output);
  }

  // required double min_offset_value1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_offset_value1(), output);
  }

  // required double min_offset_value2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_offset_value2(), output);
  }

  // required double min_offset_value3 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min_offset_value3(), output);
  }

  // required double max_offset_value1 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_offset_value1(), output);
  }

  // required double max_offset_value2 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_offset_value2(), output);
  }

  // required double max_offset_value3 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_offset_value3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
}

::google::protobuf::uint8* S2App_Sensor_History_SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double min_value1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_value1(), target);
  }

  // required double min_value2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_value2(), target);
  }

  // required double min_value3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_value3(), target);
  }

  // required double max_value1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_value1(), target);
  }

  // required double max_value2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_value2(), target);
  }

  // required double max_value3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_value3(), target);
  }

  // required double min_offset_value1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_offset_value1(), target);
  }

  // required double min_offset_value2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->min_offset_value2(), target);
  }

  // required double min_offset_value3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min_offset_value3(), target);
  }

  // required double max_offset_value1 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_offset_value1(), target);
  }

  // required double max_offset_value2 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_offset_value2(), target);
  }

  // required double max_offset_value3 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_offset_value3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  return target;
}

size_t S2App_Sensor_History_SensorData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  size_t total_size = 0;

  if (has_min_value1()) {
    // required double min_value1 = 1;
    total_size += 1 + 8;
  }

  if (has_min_value2()) {
    // required double min_value2 = 2;
    total_size += 1 + 8;
  }

  if (has_min_value3()) {
    // required double min_value3 = 3;
    total_size += 1 + 8;
  }

  if (has_max_value1()) {
    // required double max_value1 = 4;
    total_size += 1 + 8;
  }

  if (has_max_value2()) {
    // required double max_value2 = 5;
    total_size += 1 + 8;
  }

  if (has_max_value3()) {
    // required double max_value3 = 6;
    total_size += 1 + 8;
  }

  if (has_min_offset_value1()) {
    // required double min_offset_value1 = 7;
    total_size += 1 + 8;
  }

  if (has_min_offset_value2()) {
    // required double min_offset_value2 = 8;
    total_size += 1 + 8;
  }

  if (has_min_offset_value3()) {
    // required double min_offset_value3 = 9;
    total_size += 1 + 8;
  }

  if (has_max_offset_value1()) {
    // required double max_offset_value1 = 10;
    total_size += 1 + 8;
  }

  if (has_max_offset_value2()) {
    // required double max_offset_value2 = 11;
    total_size += 1 + 8;
  }

  if (has_max_offset_value3()) {
    // required double max_offset_value3 = 12;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t S2App_Sensor_History_SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required double min_value1 = 1;
    total_size += 1 + 8;

    // required double min_value2 = 2;
    total_size += 1 + 8;

    // required double min_value3 = 3;
    total_size += 1 + 8;

    // required double max_value1 = 4;
    total_size += 1 + 8;

    // required double max_value2 = 5;
    total_size += 1 + 8;

    // required double max_value3 = 6;
    total_size += 1 + 8;

    // required double min_offset_value1 = 7;
    total_size += 1 + 8;

    // required double min_offset_value2 = 8;
    total_size += 1 + 8;

    // required double min_offset_value3 = 9;
    total_size += 1 + 8;

    // required double max_offset_value1 = 10;
    total_size += 1 + 8;

    // required double max_offset_value2 = 11;
    total_size += 1 + 8;

    // required double max_offset_value3 = 12;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Sensor_History_SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Sensor_History_SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Sensor_History_SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
    MergeFrom(*source);
  }
}

void S2App_Sensor_History_SensorData::MergeFrom(const S2App_Sensor_History_SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_value1_ = from.min_value1_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_value2_ = from.min_value2_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_value3_ = from.min_value3_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_value1_ = from.max_value1_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_value2_ = from.max_value2_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_value3_ = from.max_value3_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_offset_value1_ = from.min_offset_value1_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_offset_value2_ = from.min_offset_value2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      min_offset_value3_ = from.min_offset_value3_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_offset_value1_ = from.max_offset_value1_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_offset_value2_ = from.max_offset_value2_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_offset_value3_ = from.max_offset_value3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2App_Sensor_History_SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Sensor_History_SensorData::CopyFrom(const S2App_Sensor_History_SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Sensor_History_SensorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void S2App_Sensor_History_SensorData::Swap(S2App_Sensor_History_SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Sensor_History_SensorData::InternalSwap(S2App_Sensor_History_SensorData* other) {
  std::swap(min_value1_, other->min_value1_);
  std::swap(min_value2_, other->min_value2_);
  std::swap(min_value3_, other->min_value3_);
  std::swap(max_value1_, other->max_value1_);
  std::swap(max_value2_, other->max_value2_);
  std::swap(max_value3_, other->max_value3_);
  std::swap(min_offset_value1_, other->min_offset_value1_);
  std::swap(min_offset_value2_, other->min_offset_value2_);
  std::swap(min_offset_value3_, other->min_offset_value3_);
  std::swap(max_offset_value1_, other->max_offset_value1_);
  std::swap(max_offset_value2_, other->max_offset_value2_);
  std::swap(max_offset_value3_, other->max_offset_value3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Sensor_History_SensorData::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Sensor_History_SensorData

// required double min_value1 = 1;
bool S2App_Sensor_History_SensorData::has_min_value1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_min_value1() {
  _has_bits_[0] |= 0x00000001u;
}
void S2App_Sensor_History_SensorData::clear_has_min_value1() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2App_Sensor_History_SensorData::clear_min_value1() {
  min_value1_ = 0;
  clear_has_min_value1();
}
double S2App_Sensor_History_SensorData::min_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_value1)
  return min_value1_;
}
void S2App_Sensor_History_SensorData::set_min_value1(double value) {
  set_has_min_value1();
  min_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_value1)
}

// required double min_value2 = 2;
bool S2App_Sensor_History_SensorData::has_min_value2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_min_value2() {
  _has_bits_[0] |= 0x00000002u;
}
void S2App_Sensor_History_SensorData::clear_has_min_value2() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2App_Sensor_History_SensorData::clear_min_value2() {
  min_value2_ = 0;
  clear_has_min_value2();
}
double S2App_Sensor_History_SensorData::min_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_value2)
  return min_value2_;
}
void S2App_Sensor_History_SensorData::set_min_value2(double value) {
  set_has_min_value2();
  min_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_value2)
}

// required double min_value3 = 3;
bool S2App_Sensor_History_SensorData::has_min_value3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_min_value3() {
  _has_bits_[0] |= 0x00000004u;
}
void S2App_Sensor_History_SensorData::clear_has_min_value3() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2App_Sensor_History_SensorData::clear_min_value3() {
  min_value3_ = 0;
  clear_has_min_value3();
}
double S2App_Sensor_History_SensorData::min_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_value3)
  return min_value3_;
}
void S2App_Sensor_History_SensorData::set_min_value3(double value) {
  set_has_min_value3();
  min_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_value3)
}

// required double max_value1 = 4;
bool S2App_Sensor_History_SensorData::has_max_value1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_max_value1() {
  _has_bits_[0] |= 0x00000008u;
}
void S2App_Sensor_History_SensorData::clear_has_max_value1() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2App_Sensor_History_SensorData::clear_max_value1() {
  max_value1_ = 0;
  clear_has_max_value1();
}
double S2App_Sensor_History_SensorData::max_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_value1)
  return max_value1_;
}
void S2App_Sensor_History_SensorData::set_max_value1(double value) {
  set_has_max_value1();
  max_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_value1)
}

// required double max_value2 = 5;
bool S2App_Sensor_History_SensorData::has_max_value2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_max_value2() {
  _has_bits_[0] |= 0x00000010u;
}
void S2App_Sensor_History_SensorData::clear_has_max_value2() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2App_Sensor_History_SensorData::clear_max_value2() {
  max_value2_ = 0;
  clear_has_max_value2();
}
double S2App_Sensor_History_SensorData::max_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_value2)
  return max_value2_;
}
void S2App_Sensor_History_SensorData::set_max_value2(double value) {
  set_has_max_value2();
  max_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_value2)
}

// required double max_value3 = 6;
bool S2App_Sensor_History_SensorData::has_max_value3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_max_value3() {
  _has_bits_[0] |= 0x00000020u;
}
void S2App_Sensor_History_SensorData::clear_has_max_value3() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2App_Sensor_History_SensorData::clear_max_value3() {
  max_value3_ = 0;
  clear_has_max_value3();
}
double S2App_Sensor_History_SensorData::max_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_value3)
  return max_value3_;
}
void S2App_Sensor_History_SensorData::set_max_value3(double value) {
  set_has_max_value3();
  max_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_value3)
}

// required double min_offset_value1 = 7;
bool S2App_Sensor_History_SensorData::has_min_offset_value1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_min_offset_value1() {
  _has_bits_[0] |= 0x00000040u;
}
void S2App_Sensor_History_SensorData::clear_has_min_offset_value1() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2App_Sensor_History_SensorData::clear_min_offset_value1() {
  min_offset_value1_ = 0;
  clear_has_min_offset_value1();
}
double S2App_Sensor_History_SensorData::min_offset_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_offset_value1)
  return min_offset_value1_;
}
void S2App_Sensor_History_SensorData::set_min_offset_value1(double value) {
  set_has_min_offset_value1();
  min_offset_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_offset_value1)
}

// required double min_offset_value2 = 8;
bool S2App_Sensor_History_SensorData::has_min_offset_value2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_min_offset_value2() {
  _has_bits_[0] |= 0x00000080u;
}
void S2App_Sensor_History_SensorData::clear_has_min_offset_value2() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2App_Sensor_History_SensorData::clear_min_offset_value2() {
  min_offset_value2_ = 0;
  clear_has_min_offset_value2();
}
double S2App_Sensor_History_SensorData::min_offset_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_offset_value2)
  return min_offset_value2_;
}
void S2App_Sensor_History_SensorData::set_min_offset_value2(double value) {
  set_has_min_offset_value2();
  min_offset_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_offset_value2)
}

// required double min_offset_value3 = 9;
bool S2App_Sensor_History_SensorData::has_min_offset_value3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_min_offset_value3() {
  _has_bits_[0] |= 0x00000100u;
}
void S2App_Sensor_History_SensorData::clear_has_min_offset_value3() {
  _has_bits_[0] &= ~0x00000100u;
}
void S2App_Sensor_History_SensorData::clear_min_offset_value3() {
  min_offset_value3_ = 0;
  clear_has_min_offset_value3();
}
double S2App_Sensor_History_SensorData::min_offset_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_offset_value3)
  return min_offset_value3_;
}
void S2App_Sensor_History_SensorData::set_min_offset_value3(double value) {
  set_has_min_offset_value3();
  min_offset_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.min_offset_value3)
}

// required double max_offset_value1 = 10;
bool S2App_Sensor_History_SensorData::has_max_offset_value1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_max_offset_value1() {
  _has_bits_[0] |= 0x00000200u;
}
void S2App_Sensor_History_SensorData::clear_has_max_offset_value1() {
  _has_bits_[0] &= ~0x00000200u;
}
void S2App_Sensor_History_SensorData::clear_max_offset_value1() {
  max_offset_value1_ = 0;
  clear_has_max_offset_value1();
}
double S2App_Sensor_History_SensorData::max_offset_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_offset_value1)
  return max_offset_value1_;
}
void S2App_Sensor_History_SensorData::set_max_offset_value1(double value) {
  set_has_max_offset_value1();
  max_offset_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_offset_value1)
}

// required double max_offset_value2 = 11;
bool S2App_Sensor_History_SensorData::has_max_offset_value2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_max_offset_value2() {
  _has_bits_[0] |= 0x00000400u;
}
void S2App_Sensor_History_SensorData::clear_has_max_offset_value2() {
  _has_bits_[0] &= ~0x00000400u;
}
void S2App_Sensor_History_SensorData::clear_max_offset_value2() {
  max_offset_value2_ = 0;
  clear_has_max_offset_value2();
}
double S2App_Sensor_History_SensorData::max_offset_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_offset_value2)
  return max_offset_value2_;
}
void S2App_Sensor_History_SensorData::set_max_offset_value2(double value) {
  set_has_max_offset_value2();
  max_offset_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_offset_value2)
}

// required double max_offset_value3 = 12;
bool S2App_Sensor_History_SensorData::has_max_offset_value3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void S2App_Sensor_History_SensorData::set_has_max_offset_value3() {
  _has_bits_[0] |= 0x00000800u;
}
void S2App_Sensor_History_SensorData::clear_has_max_offset_value3() {
  _has_bits_[0] &= ~0x00000800u;
}
void S2App_Sensor_History_SensorData::clear_max_offset_value3() {
  max_offset_value3_ = 0;
  clear_has_max_offset_value3();
}
double S2App_Sensor_History_SensorData::max_offset_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_offset_value3)
  return max_offset_value3_;
}
void S2App_Sensor_History_SensorData::set_max_offset_value3(double value) {
  set_has_max_offset_value3();
  max_offset_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData.max_offset_value3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2App_Sensor_History::kIdFieldNumber;
const int S2App_Sensor_History::kLongitudeFieldNumber;
const int S2App_Sensor_History::kLatitudeFieldNumber;
const int S2App_Sensor_History::kBeginTimeFieldNumber;
const int S2App_Sensor_History::kEndTimeFieldNumber;
const int S2App_Sensor_History::kInvtervalFieldNumber;
const int S2App_Sensor_History::kAvgValue1FieldNumber;
const int S2App_Sensor_History::kAvgValue2FieldNumber;
const int S2App_Sensor_History::kAvgValue3FieldNumber;
const int S2App_Sensor_History::kHistoryListFieldNumber;
const int S2App_Sensor_History::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2App_Sensor_History::S2App_Sensor_History()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2App_Sensor_History)
}
S2App_Sensor_History::S2App_Sensor_History(const S2App_Sensor_History& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      history_list_(from.history_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2App_Sensor_History)
}

void S2App_Sensor_History::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longitude_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(scene_id_));
}

S2App_Sensor_History::~S2App_Sensor_History() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  SharedDtor();
}

void S2App_Sensor_History::SharedDtor() {
}

void S2App_Sensor_History::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2App_Sensor_History::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2App_Sensor_History& S2App_Sensor_History::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2App_Sensor_History* S2App_Sensor_History::New(::google::protobuf::Arena* arena) const {
  S2App_Sensor_History* n = new S2App_Sensor_History;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2App_Sensor_History::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  history_list_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&avg_value2_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(avg_value2_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&avg_value3_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&avg_value3_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2App_Sensor_History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 begin_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 invterval = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_invterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_value1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_avg_value1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_value2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_avg_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double avg_value3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_avg_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData history_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  return false;
#undef DO_
}

void S2App_Sensor_History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required uint32 begin_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begin_time(), output);
  }

  // required uint32 end_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end_time(), output);
  }

  // required uint32 invterval = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->invterval(), output);
  }

  // required double avg_value1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->avg_value1(), output);
  }

  // required double avg_value2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->avg_value2(), output);
  }

  // required double avg_value3 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->avg_value3(), output);
  }

  // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData history_list = 10;
  for (unsigned int i = 0, n = this->history_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->history_list(i), output);
  }

  // required uint32 scene_id = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2App_Sensor_History)
}

::google::protobuf::uint8* S2App_Sensor_History::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required uint32 begin_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begin_time(), target);
  }

  // required uint32 end_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end_time(), target);
  }

  // required uint32 invterval = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->invterval(), target);
  }

  // required double avg_value1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->avg_value1(), target);
  }

  // required double avg_value2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->avg_value2(), target);
  }

  // required double avg_value3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->avg_value3(), target);
  }

  // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData history_list = 10;
  for (unsigned int i = 0, n = this->history_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->history_list(i), deterministic, target);
  }

  // required uint32 scene_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  return target;
}

size_t S2App_Sensor_History::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  size_t total_size = 0;

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_begin_time()) {
    // required uint32 begin_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_end_time()) {
    // required uint32 end_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  if (has_invterval()) {
    // required uint32 invterval = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->invterval());
  }

  if (has_avg_value1()) {
    // required double avg_value1 = 7;
    total_size += 1 + 8;
  }

  if (has_avg_value2()) {
    // required double avg_value2 = 8;
    total_size += 1 + 8;
  }

  if (has_avg_value3()) {
    // required double avg_value3 = 9;
    total_size += 1 + 8;
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t S2App_Sensor_History::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required double longitude = 2;
    total_size += 1 + 8;

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 begin_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());

    // required double latitude = 3;
    total_size += 1 + 8;

    // required uint32 end_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());

    // required uint32 invterval = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->invterval());

    // required double avg_value1 = 7;
    total_size += 1 + 8;

    // required double avg_value2 = 8;
    total_size += 1 + 8;

    // required double avg_value3 = 9;
    total_size += 1 + 8;

    // required uint32 scene_id = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData history_list = 10;
  {
    unsigned int count = this->history_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2App_Sensor_History::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  GOOGLE_DCHECK_NE(&from, this);
  const S2App_Sensor_History* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2App_Sensor_History>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2App_Sensor_History)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2App_Sensor_History)
    MergeFrom(*source);
  }
}

void S2App_Sensor_History::MergeFrom(const S2App_Sensor_History& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_list_.MergeFrom(from.history_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      invterval_ = from.invterval_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_value1_ = from.avg_value1_;
    }
    if (cached_has_bits & 0x00000080u) {
      avg_value2_ = from.avg_value2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      avg_value3_ = from.avg_value3_;
    }
    if (cached_has_bits & 0x00000200u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2App_Sensor_History::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2App_Sensor_History::CopyFrom(const S2App_Sensor_History& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2App_Sensor_History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2App_Sensor_History::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->history_list())) return false;
  return true;
}

void S2App_Sensor_History::Swap(S2App_Sensor_History* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2App_Sensor_History::InternalSwap(S2App_Sensor_History* other) {
  history_list_.InternalSwap(&other->history_list_);
  std::swap(longitude_, other->longitude_);
  std::swap(id_, other->id_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(latitude_, other->latitude_);
  std::swap(end_time_, other->end_time_);
  std::swap(invterval_, other->invterval_);
  std::swap(avg_value1_, other->avg_value1_);
  std::swap(avg_value2_, other->avg_value2_);
  std::swap(avg_value3_, other->avg_value3_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2App_Sensor_History::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2App_Sensor_History

// required uint32 id = 1;
bool S2App_Sensor_History::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2App_Sensor_History::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void S2App_Sensor_History::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2App_Sensor_History::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2App_Sensor_History::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.id)
  return id_;
}
void S2App_Sensor_History::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.id)
}

// required double longitude = 2;
bool S2App_Sensor_History::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2App_Sensor_History::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void S2App_Sensor_History::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2App_Sensor_History::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2App_Sensor_History::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.longitude)
  return longitude_;
}
void S2App_Sensor_History::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.longitude)
}

// required double latitude = 3;
bool S2App_Sensor_History::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2App_Sensor_History::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void S2App_Sensor_History::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2App_Sensor_History::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2App_Sensor_History::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.latitude)
  return latitude_;
}
void S2App_Sensor_History::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.latitude)
}

// required uint32 begin_time = 4;
bool S2App_Sensor_History::has_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2App_Sensor_History::set_has_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
void S2App_Sensor_History::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2App_Sensor_History::clear_begin_time() {
  begin_time_ = 0u;
  clear_has_begin_time();
}
::google::protobuf::uint32 S2App_Sensor_History::begin_time() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.begin_time)
  return begin_time_;
}
void S2App_Sensor_History::set_begin_time(::google::protobuf::uint32 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.begin_time)
}

// required uint32 end_time = 5;
bool S2App_Sensor_History::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2App_Sensor_History::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
void S2App_Sensor_History::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2App_Sensor_History::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
::google::protobuf::uint32 S2App_Sensor_History::end_time() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.end_time)
  return end_time_;
}
void S2App_Sensor_History::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.end_time)
}

// required uint32 invterval = 6;
bool S2App_Sensor_History::has_invterval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2App_Sensor_History::set_has_invterval() {
  _has_bits_[0] |= 0x00000020u;
}
void S2App_Sensor_History::clear_has_invterval() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2App_Sensor_History::clear_invterval() {
  invterval_ = 0u;
  clear_has_invterval();
}
::google::protobuf::uint32 S2App_Sensor_History::invterval() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.invterval)
  return invterval_;
}
void S2App_Sensor_History::set_invterval(::google::protobuf::uint32 value) {
  set_has_invterval();
  invterval_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.invterval)
}

// required double avg_value1 = 7;
bool S2App_Sensor_History::has_avg_value1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2App_Sensor_History::set_has_avg_value1() {
  _has_bits_[0] |= 0x00000040u;
}
void S2App_Sensor_History::clear_has_avg_value1() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2App_Sensor_History::clear_avg_value1() {
  avg_value1_ = 0;
  clear_has_avg_value1();
}
double S2App_Sensor_History::avg_value1() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.avg_value1)
  return avg_value1_;
}
void S2App_Sensor_History::set_avg_value1(double value) {
  set_has_avg_value1();
  avg_value1_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.avg_value1)
}

// required double avg_value2 = 8;
bool S2App_Sensor_History::has_avg_value2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2App_Sensor_History::set_has_avg_value2() {
  _has_bits_[0] |= 0x00000080u;
}
void S2App_Sensor_History::clear_has_avg_value2() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2App_Sensor_History::clear_avg_value2() {
  avg_value2_ = 0;
  clear_has_avg_value2();
}
double S2App_Sensor_History::avg_value2() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.avg_value2)
  return avg_value2_;
}
void S2App_Sensor_History::set_avg_value2(double value) {
  set_has_avg_value2();
  avg_value2_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.avg_value2)
}

// required double avg_value3 = 9;
bool S2App_Sensor_History::has_avg_value3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void S2App_Sensor_History::set_has_avg_value3() {
  _has_bits_[0] |= 0x00000100u;
}
void S2App_Sensor_History::clear_has_avg_value3() {
  _has_bits_[0] &= ~0x00000100u;
}
void S2App_Sensor_History::clear_avg_value3() {
  avg_value3_ = 0;
  clear_has_avg_value3();
}
double S2App_Sensor_History::avg_value3() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.avg_value3)
  return avg_value3_;
}
void S2App_Sensor_History::set_avg_value3(double value) {
  set_has_avg_value3();
  avg_value3_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.avg_value3)
}

// repeated .APP_SERVER_NET_Protocol.S2App_Sensor_History.SensorData history_list = 10;
int S2App_Sensor_History::history_list_size() const {
  return history_list_.size();
}
void S2App_Sensor_History::clear_history_list() {
  history_list_.Clear();
}
const ::APP_SERVER_NET_Protocol::S2App_Sensor_History_SensorData& S2App_Sensor_History::history_list(int index) const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.history_list)
  return history_list_.Get(index);
}
::APP_SERVER_NET_Protocol::S2App_Sensor_History_SensorData* S2App_Sensor_History::mutable_history_list(int index) {
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2App_Sensor_History.history_list)
  return history_list_.Mutable(index);
}
::APP_SERVER_NET_Protocol::S2App_Sensor_History_SensorData* S2App_Sensor_History::add_history_list() {
  // @@protoc_insertion_point(field_add:APP_SERVER_NET_Protocol.S2App_Sensor_History.history_list)
  return history_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Sensor_History_SensorData >*
S2App_Sensor_History::mutable_history_list() {
  // @@protoc_insertion_point(field_mutable_list:APP_SERVER_NET_Protocol.S2App_Sensor_History.history_list)
  return &history_list_;
}
const ::google::protobuf::RepeatedPtrField< ::APP_SERVER_NET_Protocol::S2App_Sensor_History_SensorData >&
S2App_Sensor_History::history_list() const {
  // @@protoc_insertion_point(field_list:APP_SERVER_NET_Protocol.S2App_Sensor_History.history_list)
  return history_list_;
}

// required uint32 scene_id = 11;
bool S2App_Sensor_History::has_scene_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void S2App_Sensor_History::set_has_scene_id() {
  _has_bits_[0] |= 0x00000200u;
}
void S2App_Sensor_History::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void S2App_Sensor_History::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2App_Sensor_History::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2App_Sensor_History.scene_id)
  return scene_id_;
}
void S2App_Sensor_History::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2App_Sensor_History.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_ERROR::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_ERROR::S2APP_ERROR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_ERROR)
}
S2APP_ERROR::S2APP_ERROR(const S2APP_ERROR& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_ERROR)
}

void S2APP_ERROR::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
}

S2APP_ERROR::~S2APP_ERROR() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_ERROR)
  SharedDtor();
}

void S2APP_ERROR::SharedDtor() {
}

void S2APP_ERROR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_ERROR::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_ERROR& S2APP_ERROR::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_ERROR* S2APP_ERROR::New(::google::protobuf::Arena* arena) const {
  S2APP_ERROR* n = new S2APP_ERROR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  error_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_ERROR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_ERROR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_ERROR)
  return false;
#undef DO_
}

void S2APP_ERROR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_ERROR)
}

::google::protobuf::uint8* S2APP_ERROR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_ERROR)
  return target;
}

size_t S2APP_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error_code());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_ERROR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_ERROR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_ERROR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_ERROR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_ERROR)
    MergeFrom(*source);
  }
}

void S2APP_ERROR::MergeFrom(const S2APP_ERROR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void S2APP_ERROR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_ERROR::CopyFrom(const S2APP_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_ERROR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void S2APP_ERROR::Swap(S2APP_ERROR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_ERROR::InternalSwap(S2APP_ERROR* other) {
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_ERROR::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_ERROR

// required uint32 error_code = 1;
bool S2APP_ERROR::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_ERROR::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_ERROR::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_ERROR::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
::google::protobuf::uint32 S2APP_ERROR::error_code() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_ERROR.error_code)
  return error_code_;
}
void S2APP_ERROR::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_ERROR.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_New_Slope::kIdFieldNumber;
const int S2APP_New_Slope::kTypeFieldNumber;
const int S2APP_New_Slope::kNameFieldNumber;
const int S2APP_New_Slope::kStateFieldNumber;
const int S2APP_New_Slope::kLongitudeFieldNumber;
const int S2APP_New_Slope::kLatitudeFieldNumber;
const int S2APP_New_Slope::kUrlFieldNumber;
const int S2APP_New_Slope::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_New_Slope::S2APP_New_Slope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_New_Slope)
}
S2APP_New_Slope::S2APP_New_Slope(const S2APP_New_Slope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_New_Slope)
}

void S2APP_New_Slope::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

S2APP_New_Slope::~S2APP_New_Slope() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  SharedDtor();
}

void S2APP_New_Slope::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2APP_New_Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_New_Slope::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_New_Slope& S2APP_New_Slope::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_New_Slope* S2APP_New_Slope::New(::google::protobuf::Arena* arena) const {
  S2APP_New_Slope* n = new S2APP_New_Slope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_New_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_New_Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  return false;
#undef DO_
}

void S2APP_New_Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required uint32 state = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->url(), output);
  }

  // required uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_New_Slope)
}

::google::protobuf::uint8* S2APP_New_Slope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint32 state = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->url(), target);
  }

  // required uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  return target;
}

size_t S2APP_New_Slope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_url()) {
    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 6;
    total_size += 1 + 8;
  }

  if (has_state()) {
    // required uint32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t S2APP_New_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double latitude = 6;
    total_size += 1 + 8;

    // required uint32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

    // required uint32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_New_Slope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_New_Slope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_New_Slope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_New_Slope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_New_Slope)
    MergeFrom(*source);
  }
}

void S2APP_New_Slope::MergeFrom(const S2APP_New_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2APP_New_Slope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_New_Slope::CopyFrom(const S2APP_New_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_New_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_New_Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void S2APP_New_Slope::Swap(S2APP_New_Slope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_New_Slope::InternalSwap(S2APP_New_Slope* other) {
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(state_, other->state_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_New_Slope::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_New_Slope

// required uint32 id = 1;
bool S2APP_New_Slope::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2APP_New_Slope::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void S2APP_New_Slope::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2APP_New_Slope::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2APP_New_Slope::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.id)
  return id_;
}
void S2APP_New_Slope::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.id)
}

// required uint32 type = 2;
bool S2APP_New_Slope::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2APP_New_Slope::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void S2APP_New_Slope::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2APP_New_Slope::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 S2APP_New_Slope::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.type)
  return type_;
}
void S2APP_New_Slope::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.type)
}

// required bytes name = 3;
bool S2APP_New_Slope::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_New_Slope::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_New_Slope::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_New_Slope::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& S2APP_New_Slope::name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
  return name_.GetNoArena();
}
void S2APP_New_Slope::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
}
#if LANG_CXX11
void S2APP_New_Slope::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
}
#endif
void S2APP_New_Slope::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
}
void S2APP_New_Slope::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
}
::std::string* S2APP_New_Slope::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_New_Slope::release_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_New_Slope::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_New_Slope.name)
}

// required uint32 state = 4;
bool S2APP_New_Slope::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2APP_New_Slope::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
void S2APP_New_Slope::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2APP_New_Slope::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 S2APP_New_Slope::state() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.state)
  return state_;
}
void S2APP_New_Slope::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.state)
}

// required double longitude = 5;
bool S2APP_New_Slope::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2APP_New_Slope::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void S2APP_New_Slope::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2APP_New_Slope::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2APP_New_Slope::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.longitude)
  return longitude_;
}
void S2APP_New_Slope::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.longitude)
}

// required double latitude = 6;
bool S2APP_New_Slope::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2APP_New_Slope::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void S2APP_New_Slope::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2APP_New_Slope::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2APP_New_Slope::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.latitude)
  return latitude_;
}
void S2APP_New_Slope::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.latitude)
}

// required bytes url = 7;
bool S2APP_New_Slope::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2APP_New_Slope::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void S2APP_New_Slope::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2APP_New_Slope::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& S2APP_New_Slope::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
  return url_.GetNoArena();
}
void S2APP_New_Slope::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
}
#if LANG_CXX11
void S2APP_New_Slope::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
}
#endif
void S2APP_New_Slope::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
}
void S2APP_New_Slope::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
}
::std::string* S2APP_New_Slope::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_New_Slope::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_New_Slope::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_New_Slope.url)
}

// required uint32 scene_id = 8;
bool S2APP_New_Slope::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2APP_New_Slope::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
void S2APP_New_Slope::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2APP_New_Slope::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2APP_New_Slope::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_New_Slope.scene_id)
  return scene_id_;
}
void S2APP_New_Slope::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_New_Slope.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_Del_Slope::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_Del_Slope::S2APP_Del_Slope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
}
S2APP_Del_Slope::S2APP_Del_Slope(const S2APP_Del_Slope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
}

void S2APP_Del_Slope::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

S2APP_Del_Slope::~S2APP_Del_Slope() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  SharedDtor();
}

void S2APP_Del_Slope::SharedDtor() {
}

void S2APP_Del_Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_Del_Slope::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_Del_Slope& S2APP_Del_Slope::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_Del_Slope* S2APP_Del_Slope::New(::google::protobuf::Arena* arena) const {
  S2APP_Del_Slope* n = new S2APP_Del_Slope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_Del_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_Del_Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  return false;
#undef DO_
}

void S2APP_Del_Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
}

::google::protobuf::uint8* S2APP_Del_Slope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  return target;
}

size_t S2APP_Del_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_Del_Slope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_Del_Slope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_Del_Slope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
    MergeFrom(*source);
  }
}

void S2APP_Del_Slope::MergeFrom(const S2APP_Del_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void S2APP_Del_Slope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_Del_Slope::CopyFrom(const S2APP_Del_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_Del_Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void S2APP_Del_Slope::Swap(S2APP_Del_Slope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_Del_Slope::InternalSwap(S2APP_Del_Slope* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_Del_Slope::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_Del_Slope

// required uint32 result = 1;
bool S2APP_Del_Slope::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_Del_Slope::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_Del_Slope::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_Del_Slope::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 S2APP_Del_Slope::result() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Del_Slope.result)
  return result_;
}
void S2APP_Del_Slope::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Del_Slope.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_Update_Slope::kIdFieldNumber;
const int S2APP_Update_Slope::kTypeFieldNumber;
const int S2APP_Update_Slope::kNameFieldNumber;
const int S2APP_Update_Slope::kStateFieldNumber;
const int S2APP_Update_Slope::kLongitudeFieldNumber;
const int S2APP_Update_Slope::kLatitudeFieldNumber;
const int S2APP_Update_Slope::kUrlFieldNumber;
const int S2APP_Update_Slope::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_Update_Slope::S2APP_Update_Slope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
}
S2APP_Update_Slope::S2APP_Update_Slope(const S2APP_Update_Slope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
}

void S2APP_Update_Slope::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

S2APP_Update_Slope::~S2APP_Update_Slope() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  SharedDtor();
}

void S2APP_Update_Slope::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2APP_Update_Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_Update_Slope::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_Update_Slope& S2APP_Update_Slope::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_Update_Slope* S2APP_Update_Slope::New(::google::protobuf::Arena* arena) const {
  S2APP_Update_Slope* n = new S2APP_Update_Slope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_Update_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_Update_Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  return false;
#undef DO_
}

void S2APP_Update_Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required uint32 state = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->url(), output);
  }

  // required uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
}

::google::protobuf::uint8* S2APP_Update_Slope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required bytes name = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint32 state = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->url(), target);
  }

  // required uint32 scene_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  return target;
}

size_t S2APP_Update_Slope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  size_t total_size = 0;

  if (has_name()) {
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_url()) {
    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 6;
    total_size += 1 + 8;
  }

  if (has_state()) {
    // required uint32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t S2APP_Update_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double latitude = 6;
    total_size += 1 + 8;

    // required uint32 state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

    // required uint32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_Update_Slope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_Update_Slope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_Update_Slope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
    MergeFrom(*source);
  }
}

void S2APP_Update_Slope::MergeFrom(const S2APP_Update_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      scene_id_ = from.scene_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void S2APP_Update_Slope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_Update_Slope::CopyFrom(const S2APP_Update_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_Update_Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void S2APP_Update_Slope::Swap(S2APP_Update_Slope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_Update_Slope::InternalSwap(S2APP_Update_Slope* other) {
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(state_, other->state_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_Update_Slope::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_Update_Slope

// required uint32 id = 1;
bool S2APP_Update_Slope::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2APP_Update_Slope::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void S2APP_Update_Slope::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2APP_Update_Slope::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2APP_Update_Slope::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.id)
  return id_;
}
void S2APP_Update_Slope::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.id)
}

// required uint32 type = 2;
bool S2APP_Update_Slope::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2APP_Update_Slope::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void S2APP_Update_Slope::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2APP_Update_Slope::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 S2APP_Update_Slope::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.type)
  return type_;
}
void S2APP_Update_Slope::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.type)
}

// required bytes name = 3;
bool S2APP_Update_Slope::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_Update_Slope::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_Update_Slope::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_Update_Slope::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& S2APP_Update_Slope::name() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
  return name_.GetNoArena();
}
void S2APP_Update_Slope::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
}
#if LANG_CXX11
void S2APP_Update_Slope::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
}
#endif
void S2APP_Update_Slope::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
}
void S2APP_Update_Slope::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
}
::std::string* S2APP_Update_Slope::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_Update_Slope::release_name() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_Update_Slope::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_Update_Slope.name)
}

// required uint32 state = 4;
bool S2APP_Update_Slope::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2APP_Update_Slope::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
void S2APP_Update_Slope::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2APP_Update_Slope::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 S2APP_Update_Slope::state() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.state)
  return state_;
}
void S2APP_Update_Slope::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.state)
}

// required double longitude = 5;
bool S2APP_Update_Slope::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2APP_Update_Slope::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
void S2APP_Update_Slope::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2APP_Update_Slope::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2APP_Update_Slope::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.longitude)
  return longitude_;
}
void S2APP_Update_Slope::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.longitude)
}

// required double latitude = 6;
bool S2APP_Update_Slope::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2APP_Update_Slope::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
void S2APP_Update_Slope::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2APP_Update_Slope::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2APP_Update_Slope::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.latitude)
  return latitude_;
}
void S2APP_Update_Slope::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.latitude)
}

// required bytes url = 7;
bool S2APP_Update_Slope::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2APP_Update_Slope::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void S2APP_Update_Slope::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2APP_Update_Slope::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& S2APP_Update_Slope::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
  return url_.GetNoArena();
}
void S2APP_Update_Slope::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
}
#if LANG_CXX11
void S2APP_Update_Slope::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
}
#endif
void S2APP_Update_Slope::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
}
void S2APP_Update_Slope::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
}
::std::string* S2APP_Update_Slope::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_Update_Slope::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_Update_Slope::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_Update_Slope.url)
}

// required uint32 scene_id = 8;
bool S2APP_Update_Slope::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2APP_Update_Slope::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
void S2APP_Update_Slope::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2APP_Update_Slope::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2APP_Update_Slope::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Slope.scene_id)
  return scene_id_;
}
void S2APP_Update_Slope::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Slope.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_Add_Sensor::kIdFieldNumber;
const int S2APP_Add_Sensor::kTypeFieldNumber;
const int S2APP_Add_Sensor::kStateFieldNumber;
const int S2APP_Add_Sensor::kSlopeIdFieldNumber;
const int S2APP_Add_Sensor::kLongitudeFieldNumber;
const int S2APP_Add_Sensor::kLatitudeFieldNumber;
const int S2APP_Add_Sensor::kUrlFieldNumber;
const int S2APP_Add_Sensor::kDescriptionFieldNumber;
const int S2APP_Add_Sensor::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_Add_Sensor::S2APP_Add_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
}
S2APP_Add_Sensor::S2APP_Add_Sensor(const S2APP_Add_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
}

void S2APP_Add_Sensor::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

S2APP_Add_Sensor::~S2APP_Add_Sensor() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  SharedDtor();
}

void S2APP_Add_Sensor::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2APP_Add_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_Add_Sensor::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_Add_Sensor& S2APP_Add_Sensor::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_Add_Sensor* S2APP_Add_Sensor::New(::google::protobuf::Arena* arena) const {
  S2APP_Add_Sensor* n = new S2APP_Add_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_Add_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&id_) + sizeof(latitude_));
  }
  scene_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_Add_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slope_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes description = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  return false;
#undef DO_
}

void S2APP_Add_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 state = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required uint32 slope_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slope_id(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->url(), output);
  }

  // required bytes description = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->description(), output);
  }

  // required uint32 scene_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
}

::google::protobuf::uint8* S2APP_Add_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 state = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // required uint32 slope_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slope_id(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->url(), target);
  }

  // required bytes description = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->description(), target);
  }

  // required uint32 scene_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  return target;
}

size_t S2APP_Add_Sensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  size_t total_size = 0;

  if (has_url()) {
    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_description()) {
    // required bytes description = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_state()) {
    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 6;
    total_size += 1 + 8;
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t S2APP_Add_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required bytes description = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

    // required uint32 slope_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double latitude = 6;
    total_size += 1 + 8;

    // required uint32 scene_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_Add_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_Add_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_Add_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
    MergeFrom(*source);
  }
}

void S2APP_Add_Sensor::MergeFrom(const S2APP_Add_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_scene_id(from.scene_id());
  }
}

void S2APP_Add_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_Add_Sensor::CopyFrom(const S2APP_Add_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Add_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_Add_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void S2APP_Add_Sensor::Swap(S2APP_Add_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_Add_Sensor::InternalSwap(S2APP_Add_Sensor* other) {
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(state_, other->state_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_Add_Sensor::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_Add_Sensor

// required uint32 id = 1;
bool S2APP_Add_Sensor::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2APP_Add_Sensor::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void S2APP_Add_Sensor::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2APP_Add_Sensor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2APP_Add_Sensor::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.id)
  return id_;
}
void S2APP_Add_Sensor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.id)
}

// required uint32 type = 2;
bool S2APP_Add_Sensor::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2APP_Add_Sensor::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void S2APP_Add_Sensor::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2APP_Add_Sensor::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 S2APP_Add_Sensor::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.type)
  return type_;
}
void S2APP_Add_Sensor::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.type)
}

// required uint32 state = 3;
bool S2APP_Add_Sensor::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2APP_Add_Sensor::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void S2APP_Add_Sensor::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2APP_Add_Sensor::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 S2APP_Add_Sensor::state() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.state)
  return state_;
}
void S2APP_Add_Sensor::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.state)
}

// required uint32 slope_id = 4;
bool S2APP_Add_Sensor::has_slope_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2APP_Add_Sensor::set_has_slope_id() {
  _has_bits_[0] |= 0x00000020u;
}
void S2APP_Add_Sensor::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2APP_Add_Sensor::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 S2APP_Add_Sensor::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.slope_id)
  return slope_id_;
}
void S2APP_Add_Sensor::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.slope_id)
}

// required double longitude = 5;
bool S2APP_Add_Sensor::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2APP_Add_Sensor::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
void S2APP_Add_Sensor::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2APP_Add_Sensor::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2APP_Add_Sensor::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.longitude)
  return longitude_;
}
void S2APP_Add_Sensor::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.longitude)
}

// required double latitude = 6;
bool S2APP_Add_Sensor::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2APP_Add_Sensor::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
void S2APP_Add_Sensor::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2APP_Add_Sensor::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2APP_Add_Sensor::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.latitude)
  return latitude_;
}
void S2APP_Add_Sensor::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.latitude)
}

// required bytes url = 7;
bool S2APP_Add_Sensor::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_Add_Sensor::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_Add_Sensor::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_Add_Sensor::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& S2APP_Add_Sensor::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
  return url_.GetNoArena();
}
void S2APP_Add_Sensor::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
}
#if LANG_CXX11
void S2APP_Add_Sensor::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
}
#endif
void S2APP_Add_Sensor::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
}
void S2APP_Add_Sensor::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
}
::std::string* S2APP_Add_Sensor::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_Add_Sensor::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_Add_Sensor::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.url)
}

// required bytes description = 8;
bool S2APP_Add_Sensor::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2APP_Add_Sensor::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void S2APP_Add_Sensor::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2APP_Add_Sensor::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& S2APP_Add_Sensor::description() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
  return description_.GetNoArena();
}
void S2APP_Add_Sensor::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
}
#if LANG_CXX11
void S2APP_Add_Sensor::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
}
#endif
void S2APP_Add_Sensor::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
}
void S2APP_Add_Sensor::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
}
::std::string* S2APP_Add_Sensor::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_Add_Sensor::release_description() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_Add_Sensor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.description)
}

// required uint32 scene_id = 9;
bool S2APP_Add_Sensor::has_scene_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void S2APP_Add_Sensor::set_has_scene_id() {
  _has_bits_[0] |= 0x00000100u;
}
void S2APP_Add_Sensor::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void S2APP_Add_Sensor::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2APP_Add_Sensor::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.scene_id)
  return scene_id_;
}
void S2APP_Add_Sensor::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Add_Sensor.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_Del_Sensor::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_Del_Sensor::S2APP_Del_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
}
S2APP_Del_Sensor::S2APP_Del_Sensor(const S2APP_Del_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
}

void S2APP_Del_Sensor::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

S2APP_Del_Sensor::~S2APP_Del_Sensor() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  SharedDtor();
}

void S2APP_Del_Sensor::SharedDtor() {
}

void S2APP_Del_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_Del_Sensor::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_Del_Sensor& S2APP_Del_Sensor::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_Del_Sensor* S2APP_Del_Sensor::New(::google::protobuf::Arena* arena) const {
  S2APP_Del_Sensor* n = new S2APP_Del_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_Del_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_Del_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  return false;
#undef DO_
}

void S2APP_Del_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
}

::google::protobuf::uint8* S2APP_Del_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  return target;
}

size_t S2APP_Del_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_Del_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_Del_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_Del_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
    MergeFrom(*source);
  }
}

void S2APP_Del_Sensor::MergeFrom(const S2APP_Del_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void S2APP_Del_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_Del_Sensor::CopyFrom(const S2APP_Del_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Del_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_Del_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void S2APP_Del_Sensor::Swap(S2APP_Del_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_Del_Sensor::InternalSwap(S2APP_Del_Sensor* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_Del_Sensor::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_Del_Sensor

// required uint32 result = 1;
bool S2APP_Del_Sensor::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_Del_Sensor::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_Del_Sensor::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_Del_Sensor::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 S2APP_Del_Sensor::result() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Del_Sensor.result)
  return result_;
}
void S2APP_Del_Sensor::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Del_Sensor.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_Update_Sensor::kIdFieldNumber;
const int S2APP_Update_Sensor::kTypeFieldNumber;
const int S2APP_Update_Sensor::kStateFieldNumber;
const int S2APP_Update_Sensor::kSlopeIdFieldNumber;
const int S2APP_Update_Sensor::kLongitudeFieldNumber;
const int S2APP_Update_Sensor::kLatitudeFieldNumber;
const int S2APP_Update_Sensor::kUrlFieldNumber;
const int S2APP_Update_Sensor::kDescriptionFieldNumber;
const int S2APP_Update_Sensor::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_Update_Sensor::S2APP_Update_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
}
S2APP_Update_Sensor::S2APP_Update_Sensor(const S2APP_Update_Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
}

void S2APP_Update_Sensor::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(scene_id_));
}

S2APP_Update_Sensor::~S2APP_Update_Sensor() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  SharedDtor();
}

void S2APP_Update_Sensor::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2APP_Update_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_Update_Sensor::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_Update_Sensor& S2APP_Update_Sensor::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_Update_Sensor* S2APP_Update_Sensor::New(::google::protobuf::Arena* arena) const {
  S2APP_Update_Sensor* n = new S2APP_Update_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_Update_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&id_) + sizeof(latitude_));
  }
  scene_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_Update_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slope_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_slope_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes description = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scene_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  return false;
#undef DO_
}

void S2APP_Update_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 state = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required uint32 slope_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slope_id(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->url(), output);
  }

  // required bytes description = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->description(), output);
  }

  // required uint32 scene_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
}

::google::protobuf::uint8* S2APP_Update_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 state = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // required uint32 slope_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slope_id(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double latitude = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // required bytes url = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->url(), target);
  }

  // required bytes description = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->description(), target);
  }

  // required uint32 scene_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  return target;
}

size_t S2APP_Update_Sensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  size_t total_size = 0;

  if (has_url()) {
    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  if (has_description()) {
    // required bytes description = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_state()) {
    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  if (has_slope_id()) {
    // required uint32 slope_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 6;
    total_size += 1 + 8;
  }

  if (has_scene_id()) {
    // required uint32 scene_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  return total_size;
}
size_t S2APP_Update_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes url = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());

    // required bytes description = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

    // required uint32 slope_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slope_id());

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double latitude = 6;
    total_size += 1 + 8;

    // required uint32 scene_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_Update_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_Update_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_Update_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
    MergeFrom(*source);
  }
}

void S2APP_Update_Sensor::MergeFrom(const S2APP_Update_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      slope_id_ = from.slope_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_scene_id(from.scene_id());
  }
}

void S2APP_Update_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_Update_Sensor::CopyFrom(const S2APP_Update_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Update_Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_Update_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void S2APP_Update_Sensor::Swap(S2APP_Update_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_Update_Sensor::InternalSwap(S2APP_Update_Sensor* other) {
  url_.Swap(&other->url_);
  description_.Swap(&other->description_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(state_, other->state_);
  std::swap(slope_id_, other->slope_id_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_Update_Sensor::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_Update_Sensor

// required uint32 id = 1;
bool S2APP_Update_Sensor::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void S2APP_Update_Sensor::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void S2APP_Update_Sensor::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void S2APP_Update_Sensor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 S2APP_Update_Sensor::id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.id)
  return id_;
}
void S2APP_Update_Sensor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.id)
}

// required uint32 type = 2;
bool S2APP_Update_Sensor::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void S2APP_Update_Sensor::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void S2APP_Update_Sensor::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void S2APP_Update_Sensor::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 S2APP_Update_Sensor::type() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.type)
  return type_;
}
void S2APP_Update_Sensor::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.type)
}

// required uint32 state = 3;
bool S2APP_Update_Sensor::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void S2APP_Update_Sensor::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void S2APP_Update_Sensor::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void S2APP_Update_Sensor::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 S2APP_Update_Sensor::state() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.state)
  return state_;
}
void S2APP_Update_Sensor::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.state)
}

// required uint32 slope_id = 4;
bool S2APP_Update_Sensor::has_slope_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void S2APP_Update_Sensor::set_has_slope_id() {
  _has_bits_[0] |= 0x00000020u;
}
void S2APP_Update_Sensor::clear_has_slope_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void S2APP_Update_Sensor::clear_slope_id() {
  slope_id_ = 0u;
  clear_has_slope_id();
}
::google::protobuf::uint32 S2APP_Update_Sensor::slope_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.slope_id)
  return slope_id_;
}
void S2APP_Update_Sensor::set_slope_id(::google::protobuf::uint32 value) {
  set_has_slope_id();
  slope_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.slope_id)
}

// required double longitude = 5;
bool S2APP_Update_Sensor::has_longitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void S2APP_Update_Sensor::set_has_longitude() {
  _has_bits_[0] |= 0x00000040u;
}
void S2APP_Update_Sensor::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000040u;
}
void S2APP_Update_Sensor::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double S2APP_Update_Sensor::longitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.longitude)
  return longitude_;
}
void S2APP_Update_Sensor::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.longitude)
}

// required double latitude = 6;
bool S2APP_Update_Sensor::has_latitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void S2APP_Update_Sensor::set_has_latitude() {
  _has_bits_[0] |= 0x00000080u;
}
void S2APP_Update_Sensor::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000080u;
}
void S2APP_Update_Sensor::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double S2APP_Update_Sensor::latitude() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.latitude)
  return latitude_;
}
void S2APP_Update_Sensor::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.latitude)
}

// required bytes url = 7;
bool S2APP_Update_Sensor::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_Update_Sensor::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_Update_Sensor::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_Update_Sensor::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& S2APP_Update_Sensor::url() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
  return url_.GetNoArena();
}
void S2APP_Update_Sensor::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
}
#if LANG_CXX11
void S2APP_Update_Sensor::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
}
#endif
void S2APP_Update_Sensor::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
}
void S2APP_Update_Sensor::set_url(const void* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
}
::std::string* S2APP_Update_Sensor::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_Update_Sensor::release_url() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_Update_Sensor::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.url)
}

// required bytes description = 8;
bool S2APP_Update_Sensor::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void S2APP_Update_Sensor::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void S2APP_Update_Sensor::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void S2APP_Update_Sensor::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& S2APP_Update_Sensor::description() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
  return description_.GetNoArena();
}
void S2APP_Update_Sensor::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
}
#if LANG_CXX11
void S2APP_Update_Sensor::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
}
#endif
void S2APP_Update_Sensor::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
}
void S2APP_Update_Sensor::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
}
::std::string* S2APP_Update_Sensor::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* S2APP_Update_Sensor::release_description() {
  // @@protoc_insertion_point(field_release:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void S2APP_Update_Sensor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.description)
}

// required uint32 scene_id = 9;
bool S2APP_Update_Sensor::has_scene_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void S2APP_Update_Sensor::set_has_scene_id() {
  _has_bits_[0] |= 0x00000100u;
}
void S2APP_Update_Sensor::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void S2APP_Update_Sensor::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
::google::protobuf::uint32 S2APP_Update_Sensor::scene_id() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.scene_id)
  return scene_id_;
}
void S2APP_Update_Sensor::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Update_Sensor.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2APP_Modify_Password_Result::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2APP_Modify_Password_Result::S2APP_Modify_Password_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
}
S2APP_Modify_Password_Result::S2APP_Modify_Password_Result(const S2APP_Modify_Password_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
}

void S2APP_Modify_Password_Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

S2APP_Modify_Password_Result::~S2APP_Modify_Password_Result() {
  // @@protoc_insertion_point(destructor:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  SharedDtor();
}

void S2APP_Modify_Password_Result::SharedDtor() {
}

void S2APP_Modify_Password_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2APP_Modify_Password_Result::descriptor() {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2APP_Modify_Password_Result& S2APP_Modify_Password_Result::default_instance() {
  protobuf_App_5fServer_5fProtocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2APP_Modify_Password_Result* S2APP_Modify_Password_Result::New(::google::protobuf::Arena* arena) const {
  S2APP_Modify_Password_Result* n = new S2APP_Modify_Password_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2APP_Modify_Password_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool S2APP_Modify_Password_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  return false;
#undef DO_
}

void S2APP_Modify_Password_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
}

::google::protobuf::uint8* S2APP_Modify_Password_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  return target;
}

size_t S2APP_Modify_Password_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2APP_Modify_Password_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const S2APP_Modify_Password_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2APP_Modify_Password_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
    MergeFrom(*source);
  }
}

void S2APP_Modify_Password_Result::MergeFrom(const S2APP_Modify_Password_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void S2APP_Modify_Password_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2APP_Modify_Password_Result::CopyFrom(const S2APP_Modify_Password_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2APP_Modify_Password_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void S2APP_Modify_Password_Result::Swap(S2APP_Modify_Password_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2APP_Modify_Password_Result::InternalSwap(S2APP_Modify_Password_Result* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2APP_Modify_Password_Result::GetMetadata() const {
  protobuf_App_5fServer_5fProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_App_5fServer_5fProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2APP_Modify_Password_Result

// required uint32 result = 1;
bool S2APP_Modify_Password_Result::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2APP_Modify_Password_Result::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void S2APP_Modify_Password_Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2APP_Modify_Password_Result::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 S2APP_Modify_Password_Result::result() const {
  // @@protoc_insertion_point(field_get:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result.result)
  return result_;
}
void S2APP_Modify_Password_Result::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:APP_SERVER_NET_Protocol.S2APP_Modify_Password_Result.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace APP_SERVER_NET_Protocol

// @@protoc_insertion_point(global_scope)
